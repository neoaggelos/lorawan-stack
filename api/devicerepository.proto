// Copyright Â© 2020 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/field_mask.proto";
import "lorawan-stack/api/end_device.proto";
import "lorawan-stack/api/messages.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/v3/pkg/ttnpb";

message EndDeviceBrand {
  string brand_id = 1 [(gogoproto.customname) = "BrandID", (validate.rules).string = {pattern: "^[a-z0-9](?:[-]?[a-z0-9]){2,}$" , max_len: 36}];
  string brand_name = 2;

  repeated string end_devices = 3;

  // TODO: add all fields from device repo
}

message EndDeviceDefinition {
  string model_id = 1 [(gogoproto.customname) = "ModelID"];
  string name = 2;
  string description = 3;

  message Version {
    string version = 1;
    uint32 numeric = 2;
    string part_number = 3;
  }
  repeated Version hardware_versions = 4;

  message FirmwareVersion {
    message Profile {
      string profile_id = 1 [(gogoproto.customname) = "ProfileID"];
      bool lorawan_certified = 2 [(gogoproto.customname) = "LoRaWANCertified"];
      string codec_id = 3 [(gogoproto.customname) = "CodecID"];
    }
    string version = 1;
    uint32 numeric = 2;
    repeated string hardware_versions = 3;
    map<string, Profile> profiles = 4;
  }
  repeated FirmwareVersion firmware_versions = 5;
  repeated string sensors = 6;
  message Dimensions {
    float width = 1;
    float height = 2;
    float diameter = 3;
    float length = 4;
  }
  Dimensions dimensions = 7;
  float weight = 8;
  message Battery {
    google.protobuf.BoolValue replaceable = 1;
    string type = 2;
  }
  Battery battery = 9;
  message OperatingConditions {
    message Limits {
      google.protobuf.FloatValue min = 1;
      google.protobuf.FloatValue max = 2;
    }
    Limits temperature = 1;
    Limits relative_humidity = 2;
  }
  OperatingConditions operating_conditions = 10;

  string ip_code = 11 [(gogoproto.customname) = "IPCode"];
  repeated string key_provisioning = 12;
  string key_security = 13;

  message Photos {
    string main = 1;
    repeated string other = 2;
  }
  Photos photos = 14;
  message Videos {
    string main = 1;
    repeated string other = 2;
  }
  Videos videos = 15;

  string product_url = 16 [(gogoproto.customname) = "ProductURL"];
  string datasheet_url = 17 [(gogoproto.customname) = "DatasheetURL"];

  message Compliances {
    message Compliance {
      string body = 1;
      string norm = 2;
      string standard = 3;
      string version = 4;
    }
    repeated Compliance safety = 1;
    repeated Compliance radio_equipment = 2;
  }
  Compliances compliances = 18;

  repeated string additional_radios = 19;
}

message ListEndDeviceBrandsRequest {
  // Optionally limit to a specific brand ID
  string brand_id = 1 [(gogoproto.customname) = "BrandID", (validate.rules).string = {pattern: "^[a-z0-9](?:[-]?[a-z0-9]){2,}$" , max_len: 36}];

  // Limit (for pagination)
  google.protobuf.UInt32Value limit = 2;

  // Offset (for pagination)
  google.protobuf.UInt32Value offset = 3;

  // Order (for pagination)
  string order_by = 4 [(validate.rules).string = {
    in: ["", "brand_id", "-brand_id"]
  }];

  // TODO: searching and field mask paths.
}

message ListEndDeviceDefinitionsRequest {
  // Query end devices from a specific brand
  string brand_id = 1 [(gogoproto.customname) = "BrandID"];
  // Query end devices matching a specific model
  string model_id = 2 [(gogoproto.customname) = "ModelID"];

  // Query end devices matching a search string
  string search = 3;

  // Order end devices
  string order_by = 4 [(validate.rules).string = {
    in: ["", "brand_id", "-brand_id", "model_id", "-model_id"]
  }];

  // Limit number of results.
  google.protobuf.UInt32Value limit = 5;

  // Start returning devices at offset.
  google.protobuf.UInt32Value offset = 6;

  // Field mask paths.
  google.protobuf.FieldMask field_mask = 7 [(gogoproto.nullable) = true];
}

message ListEndDeviceBrandsResponse {
  repeated EndDeviceBrand brands = 1;
}

message ListEndDeviceDefinitionsResponse {
  repeated EndDeviceDefinition definitions = 1;
}

service DeviceRepository {
  rpc ListBrands(ListEndDeviceBrandsRequest) returns (ListEndDeviceBrandsResponse) {
    option (google.api.http) = {
      get: "/dr/brands"

      additional_bindings {
        get: "/dr/brands/{brand_id}"
      }
    };
  };

  rpc ListDefinitions(ListEndDeviceDefinitionsRequest) returns (ListEndDeviceDefinitionsResponse) {
    option (google.api.http) = {
      get: "/dr/brands/{brand_id}/definitions"

      additional_bindings {
        get: "/dr/brands/{brand_id}/models/{model_id}/definitions"
      }
    };
  };

  rpc GetTemplate(EndDeviceVersionIdentifiers) returns (EndDeviceTemplate) {
    option (google.api.http) = {
      get: "/dr/brands/{brand_id}/models/{model_id}/{firmware_version}/{band_id}/template"
    };
  };

  rpc GetMessagePayloadFormatters(EndDeviceVersionIdentifiers) returns (MessagePayloadFormatters) {
    option (google.api.http) = {
      get: "/dr/brands/{brand_id}/models/{model_id}/{firmware_version}/{band_id}/formatters"
    };
  };
}
