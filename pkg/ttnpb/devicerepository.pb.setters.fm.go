// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

func (dst *EndDeviceBrand) SetFields(src *EndDeviceBrand, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "brand_id":
			if len(subs) > 0 {
				return fmt.Errorf("'brand_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BrandID = src.BrandID
			} else {
				var zero string
				dst.BrandID = zero
			}
		case "brand_name":
			if len(subs) > 0 {
				return fmt.Errorf("'brand_name' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BrandName = src.BrandName
			} else {
				var zero string
				dst.BrandName = zero
			}
		case "end_devices":
			if len(subs) > 0 {
				return fmt.Errorf("'end_devices' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.EndDevices = src.EndDevices
			} else {
				dst.EndDevices = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *EndDeviceDefinition) SetFields(src *EndDeviceDefinition, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "definition_id":
			if len(subs) > 0 {
				return fmt.Errorf("'definition_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DefinitionID = src.DefinitionID
			} else {
				var zero string
				dst.DefinitionID = zero
			}
		case "name":
			if len(subs) > 0 {
				return fmt.Errorf("'name' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Name = src.Name
			} else {
				var zero string
				dst.Name = zero
			}
		case "description":
			if len(subs) > 0 {
				return fmt.Errorf("'description' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Description = src.Description
			} else {
				var zero string
				dst.Description = zero
			}
		case "hardware_versions":
			if len(subs) > 0 {
				return fmt.Errorf("'hardware_versions' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.HardwareVersions = src.HardwareVersions
			} else {
				dst.HardwareVersions = nil
			}
		case "firmware_versions":
			if len(subs) > 0 {
				return fmt.Errorf("'firmware_versions' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FirmwareVersions = src.FirmwareVersions
			} else {
				dst.FirmwareVersions = nil
			}
		case "sensors":
			if len(subs) > 0 {
				return fmt.Errorf("'sensors' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Sensors = src.Sensors
			} else {
				dst.Sensors = nil
			}
		case "dimensions":
			if len(subs) > 0 {
				var newDst, newSrc *EndDeviceDefinition_Dimensions
				if (src == nil || src.Dimensions == nil) && dst.Dimensions == nil {
					continue
				}
				if src != nil {
					newSrc = src.Dimensions
				}
				if dst.Dimensions != nil {
					newDst = dst.Dimensions
				} else {
					newDst = &EndDeviceDefinition_Dimensions{}
					dst.Dimensions = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Dimensions = src.Dimensions
				} else {
					dst.Dimensions = nil
				}
			}
		case "weight":
			if len(subs) > 0 {
				return fmt.Errorf("'weight' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Weight = src.Weight
			} else {
				var zero float32
				dst.Weight = zero
			}
		case "battery":
			if len(subs) > 0 {
				var newDst, newSrc *EndDeviceDefinition_Battery
				if (src == nil || src.Battery == nil) && dst.Battery == nil {
					continue
				}
				if src != nil {
					newSrc = src.Battery
				}
				if dst.Battery != nil {
					newDst = dst.Battery
				} else {
					newDst = &EndDeviceDefinition_Battery{}
					dst.Battery = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Battery = src.Battery
				} else {
					dst.Battery = nil
				}
			}
		case "operating_conditions":
			if len(subs) > 0 {
				var newDst, newSrc *EndDeviceDefinition_OperatingConditions
				if (src == nil || src.OperatingConditions == nil) && dst.OperatingConditions == nil {
					continue
				}
				if src != nil {
					newSrc = src.OperatingConditions
				}
				if dst.OperatingConditions != nil {
					newDst = dst.OperatingConditions
				} else {
					newDst = &EndDeviceDefinition_OperatingConditions{}
					dst.OperatingConditions = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.OperatingConditions = src.OperatingConditions
				} else {
					dst.OperatingConditions = nil
				}
			}
		case "ip_code":
			if len(subs) > 0 {
				return fmt.Errorf("'ip_code' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.IPCode = src.IPCode
			} else {
				var zero string
				dst.IPCode = zero
			}
		case "key_provisioning":
			if len(subs) > 0 {
				return fmt.Errorf("'key_provisioning' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.KeyProvisioning = src.KeyProvisioning
			} else {
				dst.KeyProvisioning = nil
			}
		case "key_security":
			if len(subs) > 0 {
				return fmt.Errorf("'key_security' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.KeySecurity = src.KeySecurity
			} else {
				var zero string
				dst.KeySecurity = zero
			}
		case "photos":
			if len(subs) > 0 {
				var newDst, newSrc *EndDeviceDefinition_Photos
				if (src == nil || src.Photos == nil) && dst.Photos == nil {
					continue
				}
				if src != nil {
					newSrc = src.Photos
				}
				if dst.Photos != nil {
					newDst = dst.Photos
				} else {
					newDst = &EndDeviceDefinition_Photos{}
					dst.Photos = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Photos = src.Photos
				} else {
					dst.Photos = nil
				}
			}
		case "product_url":
			if len(subs) > 0 {
				return fmt.Errorf("'product_url' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ProductURL = src.ProductURL
			} else {
				var zero string
				dst.ProductURL = zero
			}
		case "datasheet_url":
			if len(subs) > 0 {
				return fmt.Errorf("'datasheet_url' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DatasheetURL = src.DatasheetURL
			} else {
				var zero string
				dst.DatasheetURL = zero
			}
		case "compliances":
			if len(subs) > 0 {
				var newDst, newSrc *EndDeviceDefinition_Compliances
				if (src == nil || src.Compliances == nil) && dst.Compliances == nil {
					continue
				}
				if src != nil {
					newSrc = src.Compliances
				}
				if dst.Compliances != nil {
					newDst = dst.Compliances
				} else {
					newDst = &EndDeviceDefinition_Compliances{}
					dst.Compliances = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Compliances = src.Compliances
				} else {
					dst.Compliances = nil
				}
			}
		case "additional_radios":
			if len(subs) > 0 {
				return fmt.Errorf("'additional_radios' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AdditionalRadios = src.AdditionalRadios
			} else {
				dst.AdditionalRadios = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ListEndDeviceBrandsRequest) SetFields(src *ListEndDeviceBrandsRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "brand_id":
			if len(subs) > 0 {
				return fmt.Errorf("'brand_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BrandID = src.BrandID
			} else {
				var zero string
				dst.BrandID = zero
			}
		case "limit":
			if len(subs) > 0 {
				return fmt.Errorf("'limit' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Limit = src.Limit
			} else {
				dst.Limit = nil
			}
		case "offset":
			if len(subs) > 0 {
				return fmt.Errorf("'offset' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Offset = src.Offset
			} else {
				dst.Offset = nil
			}
		case "order_by":
			if len(subs) > 0 {
				return fmt.Errorf("'order_by' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.OrderBy = src.OrderBy
			} else {
				var zero string
				dst.OrderBy = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ListEndDeviceDefinitionsRequest) SetFields(src *ListEndDeviceDefinitionsRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "brand_id":
			if len(subs) > 0 {
				return fmt.Errorf("'brand_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BrandID = src.BrandID
			} else {
				var zero string
				dst.BrandID = zero
			}
		case "model_id":
			if len(subs) > 0 {
				return fmt.Errorf("'model_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ModelID = src.ModelID
			} else {
				var zero string
				dst.ModelID = zero
			}
		case "search":
			if len(subs) > 0 {
				return fmt.Errorf("'search' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Search = src.Search
			} else {
				var zero string
				dst.Search = zero
			}
		case "order_by":
			if len(subs) > 0 {
				return fmt.Errorf("'order_by' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.OrderBy = src.OrderBy
			} else {
				var zero string
				dst.OrderBy = zero
			}
		case "limit":
			if len(subs) > 0 {
				return fmt.Errorf("'limit' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Limit = src.Limit
			} else {
				dst.Limit = nil
			}
		case "offset":
			if len(subs) > 0 {
				return fmt.Errorf("'offset' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Offset = src.Offset
			} else {
				dst.Offset = nil
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				dst.FieldMask = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ListEndDeviceBrandsResponse) SetFields(src *ListEndDeviceBrandsResponse, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "brands":
			if len(subs) > 0 {
				return fmt.Errorf("'brands' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Brands = src.Brands
			} else {
				dst.Brands = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ListEndDeviceDefinitionsResponse) SetFields(src *ListEndDeviceDefinitionsResponse, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "definitions":
			if len(subs) > 0 {
				return fmt.Errorf("'definitions' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Definitions = src.Definitions
			} else {
				dst.Definitions = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *EndDeviceDefinition_Version) SetFields(src *EndDeviceDefinition_Version, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "version":
			if len(subs) > 0 {
				return fmt.Errorf("'version' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Version = src.Version
			} else {
				var zero string
				dst.Version = zero
			}
		case "numeric":
			if len(subs) > 0 {
				return fmt.Errorf("'numeric' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Numeric = src.Numeric
			} else {
				var zero uint32
				dst.Numeric = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *EndDeviceDefinition_FirmwareVersion) SetFields(src *EndDeviceDefinition_FirmwareVersion, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "version":
			if len(subs) > 0 {
				return fmt.Errorf("'version' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Version = src.Version
			} else {
				var zero string
				dst.Version = zero
			}
		case "numeric":
			if len(subs) > 0 {
				return fmt.Errorf("'numeric' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Numeric = src.Numeric
			} else {
				var zero uint32
				dst.Numeric = zero
			}
		case "hardware_versions":
			if len(subs) > 0 {
				return fmt.Errorf("'hardware_versions' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.HardwareVersions = src.HardwareVersions
			} else {
				dst.HardwareVersions = nil
			}
		case "profiles":
			if len(subs) > 0 {
				return fmt.Errorf("'profiles' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Profiles = src.Profiles
			} else {
				dst.Profiles = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *EndDeviceDefinition_Dimensions) SetFields(src *EndDeviceDefinition_Dimensions, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "width":
			if len(subs) > 0 {
				return fmt.Errorf("'width' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Width = src.Width
			} else {
				var zero float32
				dst.Width = zero
			}
		case "height":
			if len(subs) > 0 {
				return fmt.Errorf("'height' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Height = src.Height
			} else {
				var zero float32
				dst.Height = zero
			}
		case "diameter":
			if len(subs) > 0 {
				return fmt.Errorf("'diameter' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Diameter = src.Diameter
			} else {
				var zero float32
				dst.Diameter = zero
			}
		case "length":
			if len(subs) > 0 {
				return fmt.Errorf("'length' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Length = src.Length
			} else {
				var zero float32
				dst.Length = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *EndDeviceDefinition_Battery) SetFields(src *EndDeviceDefinition_Battery, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "replaceable":
			if len(subs) > 0 {
				return fmt.Errorf("'replaceable' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Replaceable = src.Replaceable
			} else {
				dst.Replaceable = nil
			}
		case "type":
			if len(subs) > 0 {
				return fmt.Errorf("'type' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Type = src.Type
			} else {
				var zero string
				dst.Type = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *EndDeviceDefinition_OperatingConditions) SetFields(src *EndDeviceDefinition_OperatingConditions, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "temperature":
			if len(subs) > 0 {
				var newDst, newSrc *EndDeviceDefinition_OperatingConditions_Limits
				if (src == nil || src.Temperature == nil) && dst.Temperature == nil {
					continue
				}
				if src != nil {
					newSrc = src.Temperature
				}
				if dst.Temperature != nil {
					newDst = dst.Temperature
				} else {
					newDst = &EndDeviceDefinition_OperatingConditions_Limits{}
					dst.Temperature = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Temperature = src.Temperature
				} else {
					dst.Temperature = nil
				}
			}
		case "relative_humidity":
			if len(subs) > 0 {
				var newDst, newSrc *EndDeviceDefinition_OperatingConditions_Limits
				if (src == nil || src.RelativeHumidity == nil) && dst.RelativeHumidity == nil {
					continue
				}
				if src != nil {
					newSrc = src.RelativeHumidity
				}
				if dst.RelativeHumidity != nil {
					newDst = dst.RelativeHumidity
				} else {
					newDst = &EndDeviceDefinition_OperatingConditions_Limits{}
					dst.RelativeHumidity = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.RelativeHumidity = src.RelativeHumidity
				} else {
					dst.RelativeHumidity = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *EndDeviceDefinition_Photos) SetFields(src *EndDeviceDefinition_Photos, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "main":
			if len(subs) > 0 {
				return fmt.Errorf("'main' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Main = src.Main
			} else {
				var zero string
				dst.Main = zero
			}
		case "other":
			if len(subs) > 0 {
				return fmt.Errorf("'other' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Other = src.Other
			} else {
				dst.Other = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *EndDeviceDefinition_Compliances) SetFields(src *EndDeviceDefinition_Compliances, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "safety":
			if len(subs) > 0 {
				return fmt.Errorf("'safety' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Safety = src.Safety
			} else {
				dst.Safety = nil
			}
		case "radio_equipment":
			if len(subs) > 0 {
				return fmt.Errorf("'radio_equipment' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RadioEquipment = src.RadioEquipment
			} else {
				dst.RadioEquipment = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *EndDeviceDefinition_FirmwareVersion_Profile) SetFields(src *EndDeviceDefinition_FirmwareVersion_Profile, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "profile_id":
			if len(subs) > 0 {
				return fmt.Errorf("'profile_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ProfileID = src.ProfileID
			} else {
				var zero string
				dst.ProfileID = zero
			}
		case "lorawan_certified":
			if len(subs) > 0 {
				return fmt.Errorf("'lorawan_certified' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.LoRaWANCertified = src.LoRaWANCertified
			} else {
				var zero bool
				dst.LoRaWANCertified = zero
			}
		case "codec_id":
			if len(subs) > 0 {
				return fmt.Errorf("'codec_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.CodecID = src.CodecID
			} else {
				var zero string
				dst.CodecID = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *EndDeviceDefinition_OperatingConditions_Limits) SetFields(src *EndDeviceDefinition_OperatingConditions_Limits, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "min":
			if len(subs) > 0 {
				return fmt.Errorf("'min' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Min = src.Min
			} else {
				dst.Min = nil
			}
		case "max":
			if len(subs) > 0 {
				return fmt.Errorf("'max' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Max = src.Max
			} else {
				dst.Max = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *EndDeviceDefinition_Compliances_Compliance) SetFields(src *EndDeviceDefinition_Compliances_Compliance, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "body":
			if len(subs) > 0 {
				return fmt.Errorf("'body' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Body = src.Body
			} else {
				var zero string
				dst.Body = zero
			}
		case "norm":
			if len(subs) > 0 {
				return fmt.Errorf("'norm' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Norm = src.Norm
			} else {
				var zero string
				dst.Norm = zero
			}
		case "standard":
			if len(subs) > 0 {
				return fmt.Errorf("'standard' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Standard = src.Standard
			} else {
				var zero string
				dst.Standard = zero
			}
		case "version":
			if len(subs) > 0 {
				return fmt.Errorf("'version' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Version = src.Version
			} else {
				var zero string
				dst.Version = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
