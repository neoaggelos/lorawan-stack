// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _devicerepository_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// ValidateFields checks the field values on EndDeviceBrand with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EndDeviceBrand) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = EndDeviceBrandFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "brand_id":

			if utf8.RuneCountInString(m.GetBrandID()) > 36 {
				return EndDeviceBrandValidationError{
					field:  "brand_id",
					reason: "value length must be at most 36 runes",
				}
			}

			if !_EndDeviceBrand_BrandID_Pattern.MatchString(m.GetBrandID()) {
				return EndDeviceBrandValidationError{
					field:  "brand_id",
					reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
				}
			}

		case "brand_name":
			// no validation rules for BrandName
		case "end_devices":

		default:
			return EndDeviceBrandValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// EndDeviceBrandValidationError is the validation error returned by
// EndDeviceBrand.ValidateFields if the designated constraints aren't met.
type EndDeviceBrandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceBrandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceBrandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceBrandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceBrandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceBrandValidationError) ErrorName() string { return "EndDeviceBrandValidationError" }

// Error satisfies the builtin error interface
func (e EndDeviceBrandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceBrand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceBrandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceBrandValidationError{}

var _EndDeviceBrand_BrandID_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

// ValidateFields checks the field values on EndDeviceDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EndDeviceDefinition) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = EndDeviceDefinitionFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "definition_id":
			// no validation rules for DefinitionID
		case "name":
			// no validation rules for Name
		case "description":
			// no validation rules for Description
		case "hardware_versions":

			for idx, item := range m.GetHardwareVersions() {
				_, _ = idx, item

				if v, ok := interface{}(item).(interface{ ValidateFields(...string) error }); ok {
					if err := v.ValidateFields(subs...); err != nil {
						return EndDeviceDefinitionValidationError{
							field:  fmt.Sprintf("hardware_versions[%v]", idx),
							reason: "embedded message failed validation",
							cause:  err,
						}
					}
				}

			}

		case "firmware_versions":

			for idx, item := range m.GetFirmwareVersions() {
				_, _ = idx, item

				if v, ok := interface{}(item).(interface{ ValidateFields(...string) error }); ok {
					if err := v.ValidateFields(subs...); err != nil {
						return EndDeviceDefinitionValidationError{
							field:  fmt.Sprintf("firmware_versions[%v]", idx),
							reason: "embedded message failed validation",
							cause:  err,
						}
					}
				}

			}

		case "sensors":

		case "dimensions":

			if v, ok := interface{}(m.GetDimensions()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return EndDeviceDefinitionValidationError{
						field:  "dimensions",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "weight":
			// no validation rules for Weight
		case "battery":

			if v, ok := interface{}(m.GetBattery()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return EndDeviceDefinitionValidationError{
						field:  "battery",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "operating_conditions":

			if v, ok := interface{}(m.GetOperatingConditions()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return EndDeviceDefinitionValidationError{
						field:  "operating_conditions",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "ip_code":
			// no validation rules for IPCode
		case "key_provisioning":

		case "key_security":
			// no validation rules for KeySecurity
		case "photos":

			if v, ok := interface{}(m.GetPhotos()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return EndDeviceDefinitionValidationError{
						field:  "photos",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "product_url":
			// no validation rules for ProductURL
		case "datasheet_url":
			// no validation rules for DatasheetURL
		case "compliances":

			if v, ok := interface{}(m.GetCompliances()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return EndDeviceDefinitionValidationError{
						field:  "compliances",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "additional_radios":

		default:
			return EndDeviceDefinitionValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// EndDeviceDefinitionValidationError is the validation error returned by
// EndDeviceDefinition.ValidateFields if the designated constraints aren't met.
type EndDeviceDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceDefinitionValidationError) ErrorName() string {
	return "EndDeviceDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e EndDeviceDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceDefinitionValidationError{}

// ValidateFields checks the field values on ListEndDeviceBrandsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListEndDeviceBrandsRequest) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = ListEndDeviceBrandsRequestFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "brand_id":

			if utf8.RuneCountInString(m.GetBrandID()) > 36 {
				return ListEndDeviceBrandsRequestValidationError{
					field:  "brand_id",
					reason: "value length must be at most 36 runes",
				}
			}

			if !_ListEndDeviceBrandsRequest_BrandID_Pattern.MatchString(m.GetBrandID()) {
				return ListEndDeviceBrandsRequestValidationError{
					field:  "brand_id",
					reason: "value does not match regex pattern \"^[a-z0-9](?:[-]?[a-z0-9]){2,}$\"",
				}
			}

		case "limit":

			if v, ok := interface{}(m.GetLimit()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return ListEndDeviceBrandsRequestValidationError{
						field:  "limit",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "offset":

			if v, ok := interface{}(m.GetOffset()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return ListEndDeviceBrandsRequestValidationError{
						field:  "offset",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "order_by":

			if _, ok := _ListEndDeviceBrandsRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
				return ListEndDeviceBrandsRequestValidationError{
					field:  "order_by",
					reason: "value must be in list [ brand_id -brand_id]",
				}
			}

		default:
			return ListEndDeviceBrandsRequestValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// ListEndDeviceBrandsRequestValidationError is the validation error returned
// by ListEndDeviceBrandsRequest.ValidateFields if the designated constraints
// aren't met.
type ListEndDeviceBrandsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEndDeviceBrandsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEndDeviceBrandsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEndDeviceBrandsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEndDeviceBrandsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEndDeviceBrandsRequestValidationError) ErrorName() string {
	return "ListEndDeviceBrandsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEndDeviceBrandsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEndDeviceBrandsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEndDeviceBrandsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEndDeviceBrandsRequestValidationError{}

var _ListEndDeviceBrandsRequest_BrandID_Pattern = regexp.MustCompile("^[a-z0-9](?:[-]?[a-z0-9]){2,}$")

var _ListEndDeviceBrandsRequest_OrderBy_InLookup = map[string]struct{}{
	"":          {},
	"brand_id":  {},
	"-brand_id": {},
}

// ValidateFields checks the field values on ListEndDeviceDefinitionsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListEndDeviceDefinitionsRequest) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = ListEndDeviceDefinitionsRequestFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "brand_id":
			// no validation rules for BrandID
		case "model_id":
			// no validation rules for ModelID
		case "search":
			// no validation rules for Search
		case "order_by":

			if _, ok := _ListEndDeviceDefinitionsRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
				return ListEndDeviceDefinitionsRequestValidationError{
					field:  "order_by",
					reason: "value must be in list [ brand_id -brand_id model_id -model_id]",
				}
			}

		case "limit":

			if v, ok := interface{}(m.GetLimit()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return ListEndDeviceDefinitionsRequestValidationError{
						field:  "limit",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "offset":

			if v, ok := interface{}(m.GetOffset()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return ListEndDeviceDefinitionsRequestValidationError{
						field:  "offset",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "field_mask":

			if v, ok := interface{}(m.GetFieldMask()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return ListEndDeviceDefinitionsRequestValidationError{
						field:  "field_mask",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return ListEndDeviceDefinitionsRequestValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// ListEndDeviceDefinitionsRequestValidationError is the validation error
// returned by ListEndDeviceDefinitionsRequest.ValidateFields if the
// designated constraints aren't met.
type ListEndDeviceDefinitionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEndDeviceDefinitionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEndDeviceDefinitionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEndDeviceDefinitionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEndDeviceDefinitionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEndDeviceDefinitionsRequestValidationError) ErrorName() string {
	return "ListEndDeviceDefinitionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEndDeviceDefinitionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEndDeviceDefinitionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEndDeviceDefinitionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEndDeviceDefinitionsRequestValidationError{}

var _ListEndDeviceDefinitionsRequest_OrderBy_InLookup = map[string]struct{}{
	"":          {},
	"brand_id":  {},
	"-brand_id": {},
	"model_id":  {},
	"-model_id": {},
}

// ValidateFields checks the field values on ListEndDeviceBrandsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListEndDeviceBrandsResponse) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = ListEndDeviceBrandsResponseFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "brands":

			for idx, item := range m.GetBrands() {
				_, _ = idx, item

				if v, ok := interface{}(item).(interface{ ValidateFields(...string) error }); ok {
					if err := v.ValidateFields(subs...); err != nil {
						return ListEndDeviceBrandsResponseValidationError{
							field:  fmt.Sprintf("brands[%v]", idx),
							reason: "embedded message failed validation",
							cause:  err,
						}
					}
				}

			}

		default:
			return ListEndDeviceBrandsResponseValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// ListEndDeviceBrandsResponseValidationError is the validation error returned
// by ListEndDeviceBrandsResponse.ValidateFields if the designated constraints
// aren't met.
type ListEndDeviceBrandsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEndDeviceBrandsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEndDeviceBrandsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEndDeviceBrandsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEndDeviceBrandsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEndDeviceBrandsResponseValidationError) ErrorName() string {
	return "ListEndDeviceBrandsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEndDeviceBrandsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEndDeviceBrandsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEndDeviceBrandsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEndDeviceBrandsResponseValidationError{}

// ValidateFields checks the field values on ListEndDeviceDefinitionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListEndDeviceDefinitionsResponse) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = ListEndDeviceDefinitionsResponseFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "definitions":

			for idx, item := range m.GetDefinitions() {
				_, _ = idx, item

				if v, ok := interface{}(item).(interface{ ValidateFields(...string) error }); ok {
					if err := v.ValidateFields(subs...); err != nil {
						return ListEndDeviceDefinitionsResponseValidationError{
							field:  fmt.Sprintf("definitions[%v]", idx),
							reason: "embedded message failed validation",
							cause:  err,
						}
					}
				}

			}

		default:
			return ListEndDeviceDefinitionsResponseValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// ListEndDeviceDefinitionsResponseValidationError is the validation error
// returned by ListEndDeviceDefinitionsResponse.ValidateFields if the
// designated constraints aren't met.
type ListEndDeviceDefinitionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEndDeviceDefinitionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEndDeviceDefinitionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEndDeviceDefinitionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEndDeviceDefinitionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEndDeviceDefinitionsResponseValidationError) ErrorName() string {
	return "ListEndDeviceDefinitionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEndDeviceDefinitionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEndDeviceDefinitionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEndDeviceDefinitionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEndDeviceDefinitionsResponseValidationError{}

// ValidateFields checks the field values on EndDeviceDefinition_Version with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *EndDeviceDefinition_Version) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = EndDeviceDefinition_VersionFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "version":
			// no validation rules for Version
		case "numeric":
			// no validation rules for Numeric
		default:
			return EndDeviceDefinition_VersionValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// EndDeviceDefinition_VersionValidationError is the validation error returned
// by EndDeviceDefinition_Version.ValidateFields if the designated constraints
// aren't met.
type EndDeviceDefinition_VersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceDefinition_VersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceDefinition_VersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceDefinition_VersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceDefinition_VersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceDefinition_VersionValidationError) ErrorName() string {
	return "EndDeviceDefinition_VersionValidationError"
}

// Error satisfies the builtin error interface
func (e EndDeviceDefinition_VersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceDefinition_Version.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceDefinition_VersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceDefinition_VersionValidationError{}

// ValidateFields checks the field values on
// EndDeviceDefinition_FirmwareVersion with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *EndDeviceDefinition_FirmwareVersion) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = EndDeviceDefinition_FirmwareVersionFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "version":
			// no validation rules for Version
		case "numeric":
			// no validation rules for Numeric
		case "hardware_versions":

		case "profiles":

			for key, val := range m.GetProfiles() {
				_ = val

				// no validation rules for Profiles[key]

				if v, ok := interface{}(val).(interface{ ValidateFields(...string) error }); ok {
					if err := v.ValidateFields(subs...); err != nil {
						return EndDeviceDefinition_FirmwareVersionValidationError{
							field:  fmt.Sprintf("profiles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						}
					}
				}

			}

		default:
			return EndDeviceDefinition_FirmwareVersionValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// EndDeviceDefinition_FirmwareVersionValidationError is the validation error
// returned by EndDeviceDefinition_FirmwareVersion.ValidateFields if the
// designated constraints aren't met.
type EndDeviceDefinition_FirmwareVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceDefinition_FirmwareVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceDefinition_FirmwareVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceDefinition_FirmwareVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceDefinition_FirmwareVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceDefinition_FirmwareVersionValidationError) ErrorName() string {
	return "EndDeviceDefinition_FirmwareVersionValidationError"
}

// Error satisfies the builtin error interface
func (e EndDeviceDefinition_FirmwareVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceDefinition_FirmwareVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceDefinition_FirmwareVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceDefinition_FirmwareVersionValidationError{}

// ValidateFields checks the field values on EndDeviceDefinition_Dimensions
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *EndDeviceDefinition_Dimensions) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = EndDeviceDefinition_DimensionsFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "width":
			// no validation rules for Width
		case "height":
			// no validation rules for Height
		case "diameter":
			// no validation rules for Diameter
		case "length":
			// no validation rules for Length
		default:
			return EndDeviceDefinition_DimensionsValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// EndDeviceDefinition_DimensionsValidationError is the validation error
// returned by EndDeviceDefinition_Dimensions.ValidateFields if the designated
// constraints aren't met.
type EndDeviceDefinition_DimensionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceDefinition_DimensionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceDefinition_DimensionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceDefinition_DimensionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceDefinition_DimensionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceDefinition_DimensionsValidationError) ErrorName() string {
	return "EndDeviceDefinition_DimensionsValidationError"
}

// Error satisfies the builtin error interface
func (e EndDeviceDefinition_DimensionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceDefinition_Dimensions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceDefinition_DimensionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceDefinition_DimensionsValidationError{}

// ValidateFields checks the field values on EndDeviceDefinition_Battery with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *EndDeviceDefinition_Battery) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = EndDeviceDefinition_BatteryFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "replaceable":

			if v, ok := interface{}(m.GetReplaceable()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return EndDeviceDefinition_BatteryValidationError{
						field:  "replaceable",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "type":
			// no validation rules for Type
		default:
			return EndDeviceDefinition_BatteryValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// EndDeviceDefinition_BatteryValidationError is the validation error returned
// by EndDeviceDefinition_Battery.ValidateFields if the designated constraints
// aren't met.
type EndDeviceDefinition_BatteryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceDefinition_BatteryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceDefinition_BatteryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceDefinition_BatteryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceDefinition_BatteryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceDefinition_BatteryValidationError) ErrorName() string {
	return "EndDeviceDefinition_BatteryValidationError"
}

// Error satisfies the builtin error interface
func (e EndDeviceDefinition_BatteryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceDefinition_Battery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceDefinition_BatteryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceDefinition_BatteryValidationError{}

// ValidateFields checks the field values on
// EndDeviceDefinition_OperatingConditions with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *EndDeviceDefinition_OperatingConditions) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = EndDeviceDefinition_OperatingConditionsFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "temperature":

			if v, ok := interface{}(m.GetTemperature()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return EndDeviceDefinition_OperatingConditionsValidationError{
						field:  "temperature",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "relative_humidity":

			if v, ok := interface{}(m.GetRelativeHumidity()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return EndDeviceDefinition_OperatingConditionsValidationError{
						field:  "relative_humidity",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return EndDeviceDefinition_OperatingConditionsValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// EndDeviceDefinition_OperatingConditionsValidationError is the validation
// error returned by EndDeviceDefinition_OperatingConditions.ValidateFields if
// the designated constraints aren't met.
type EndDeviceDefinition_OperatingConditionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceDefinition_OperatingConditionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceDefinition_OperatingConditionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceDefinition_OperatingConditionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceDefinition_OperatingConditionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceDefinition_OperatingConditionsValidationError) ErrorName() string {
	return "EndDeviceDefinition_OperatingConditionsValidationError"
}

// Error satisfies the builtin error interface
func (e EndDeviceDefinition_OperatingConditionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceDefinition_OperatingConditions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceDefinition_OperatingConditionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceDefinition_OperatingConditionsValidationError{}

// ValidateFields checks the field values on EndDeviceDefinition_Photos with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *EndDeviceDefinition_Photos) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = EndDeviceDefinition_PhotosFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "main":
			// no validation rules for Main
		case "other":

		default:
			return EndDeviceDefinition_PhotosValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// EndDeviceDefinition_PhotosValidationError is the validation error returned
// by EndDeviceDefinition_Photos.ValidateFields if the designated constraints
// aren't met.
type EndDeviceDefinition_PhotosValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceDefinition_PhotosValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceDefinition_PhotosValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceDefinition_PhotosValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceDefinition_PhotosValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceDefinition_PhotosValidationError) ErrorName() string {
	return "EndDeviceDefinition_PhotosValidationError"
}

// Error satisfies the builtin error interface
func (e EndDeviceDefinition_PhotosValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceDefinition_Photos.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceDefinition_PhotosValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceDefinition_PhotosValidationError{}

// ValidateFields checks the field values on EndDeviceDefinition_Compliances
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *EndDeviceDefinition_Compliances) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = EndDeviceDefinition_CompliancesFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "safety":

			for idx, item := range m.GetSafety() {
				_, _ = idx, item

				if v, ok := interface{}(item).(interface{ ValidateFields(...string) error }); ok {
					if err := v.ValidateFields(subs...); err != nil {
						return EndDeviceDefinition_CompliancesValidationError{
							field:  fmt.Sprintf("safety[%v]", idx),
							reason: "embedded message failed validation",
							cause:  err,
						}
					}
				}

			}

		case "radio_equipment":

			for idx, item := range m.GetRadioEquipment() {
				_, _ = idx, item

				if v, ok := interface{}(item).(interface{ ValidateFields(...string) error }); ok {
					if err := v.ValidateFields(subs...); err != nil {
						return EndDeviceDefinition_CompliancesValidationError{
							field:  fmt.Sprintf("radio_equipment[%v]", idx),
							reason: "embedded message failed validation",
							cause:  err,
						}
					}
				}

			}

		default:
			return EndDeviceDefinition_CompliancesValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// EndDeviceDefinition_CompliancesValidationError is the validation error
// returned by EndDeviceDefinition_Compliances.ValidateFields if the
// designated constraints aren't met.
type EndDeviceDefinition_CompliancesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceDefinition_CompliancesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceDefinition_CompliancesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceDefinition_CompliancesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceDefinition_CompliancesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceDefinition_CompliancesValidationError) ErrorName() string {
	return "EndDeviceDefinition_CompliancesValidationError"
}

// Error satisfies the builtin error interface
func (e EndDeviceDefinition_CompliancesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceDefinition_Compliances.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceDefinition_CompliancesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceDefinition_CompliancesValidationError{}

// ValidateFields checks the field values on
// EndDeviceDefinition_FirmwareVersion_Profile with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EndDeviceDefinition_FirmwareVersion_Profile) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = EndDeviceDefinition_FirmwareVersion_ProfileFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "profile_id":
			// no validation rules for ProfileID
		case "lorawan_certified":
			// no validation rules for LoRaWANCertified
		case "codec_id":
			// no validation rules for CodecID
		default:
			return EndDeviceDefinition_FirmwareVersion_ProfileValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// EndDeviceDefinition_FirmwareVersion_ProfileValidationError is the validation
// error returned by
// EndDeviceDefinition_FirmwareVersion_Profile.ValidateFields if the
// designated constraints aren't met.
type EndDeviceDefinition_FirmwareVersion_ProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceDefinition_FirmwareVersion_ProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceDefinition_FirmwareVersion_ProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceDefinition_FirmwareVersion_ProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceDefinition_FirmwareVersion_ProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceDefinition_FirmwareVersion_ProfileValidationError) ErrorName() string {
	return "EndDeviceDefinition_FirmwareVersion_ProfileValidationError"
}

// Error satisfies the builtin error interface
func (e EndDeviceDefinition_FirmwareVersion_ProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceDefinition_FirmwareVersion_Profile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceDefinition_FirmwareVersion_ProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceDefinition_FirmwareVersion_ProfileValidationError{}

// ValidateFields checks the field values on
// EndDeviceDefinition_OperatingConditions_Limits with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EndDeviceDefinition_OperatingConditions_Limits) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = EndDeviceDefinition_OperatingConditions_LimitsFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "min":

			if v, ok := interface{}(m.GetMin()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return EndDeviceDefinition_OperatingConditions_LimitsValidationError{
						field:  "min",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "max":

			if v, ok := interface{}(m.GetMax()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return EndDeviceDefinition_OperatingConditions_LimitsValidationError{
						field:  "max",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return EndDeviceDefinition_OperatingConditions_LimitsValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// EndDeviceDefinition_OperatingConditions_LimitsValidationError is the
// validation error returned by
// EndDeviceDefinition_OperatingConditions_Limits.ValidateFields if the
// designated constraints aren't met.
type EndDeviceDefinition_OperatingConditions_LimitsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceDefinition_OperatingConditions_LimitsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceDefinition_OperatingConditions_LimitsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e EndDeviceDefinition_OperatingConditions_LimitsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceDefinition_OperatingConditions_LimitsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceDefinition_OperatingConditions_LimitsValidationError) ErrorName() string {
	return "EndDeviceDefinition_OperatingConditions_LimitsValidationError"
}

// Error satisfies the builtin error interface
func (e EndDeviceDefinition_OperatingConditions_LimitsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceDefinition_OperatingConditions_Limits.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceDefinition_OperatingConditions_LimitsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceDefinition_OperatingConditions_LimitsValidationError{}

// ValidateFields checks the field values on
// EndDeviceDefinition_Compliances_Compliance with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EndDeviceDefinition_Compliances_Compliance) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = EndDeviceDefinition_Compliances_ComplianceFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "body":
			// no validation rules for Body
		case "norm":
			// no validation rules for Norm
		case "standard":
			// no validation rules for Standard
		case "version":
			// no validation rules for Version
		default:
			return EndDeviceDefinition_Compliances_ComplianceValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// EndDeviceDefinition_Compliances_ComplianceValidationError is the validation
// error returned by EndDeviceDefinition_Compliances_Compliance.ValidateFields
// if the designated constraints aren't met.
type EndDeviceDefinition_Compliances_ComplianceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndDeviceDefinition_Compliances_ComplianceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndDeviceDefinition_Compliances_ComplianceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndDeviceDefinition_Compliances_ComplianceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndDeviceDefinition_Compliances_ComplianceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndDeviceDefinition_Compliances_ComplianceValidationError) ErrorName() string {
	return "EndDeviceDefinition_Compliances_ComplianceValidationError"
}

// Error satisfies the builtin error interface
func (e EndDeviceDefinition_Compliances_ComplianceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndDeviceDefinition_Compliances_Compliance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndDeviceDefinition_Compliances_ComplianceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndDeviceDefinition_Compliances_ComplianceValidationError{}
