// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/devicerepository.proto

package ttnpb

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EndDeviceBrand struct {
	BrandID                       string   `protobuf:"bytes,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	BrandName                     string   `protobuf:"bytes,2,opt,name=brand_name,json=brandName,proto3" json:"brand_name,omitempty"`
	PrivateEnterpriseNumber       uint32   `protobuf:"varint,3,opt,name=private_enterprise_number,json=privateEnterpriseNumber,proto3" json:"private_enterprise_number,omitempty"`
	OrganizationUniqueIdentifiers []string `protobuf:"bytes,4,rep,name=organization_unique_identifiers,json=organizationUniqueIdentifiers,proto3" json:"organization_unique_identifiers,omitempty"`
	VendorId                      uint32   `protobuf:"varint,5,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	Website                       string   `protobuf:"bytes,6,opt,name=website,proto3" json:"website,omitempty"`
	Email                         string   `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	Logo                          string   `protobuf:"bytes,8,opt,name=logo,proto3" json:"logo,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *EndDeviceBrand) Reset()      { *m = EndDeviceBrand{} }
func (*EndDeviceBrand) ProtoMessage() {}
func (*EndDeviceBrand) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{0}
}
func (m *EndDeviceBrand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceBrand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceBrand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceBrand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceBrand.Merge(m, src)
}
func (m *EndDeviceBrand) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceBrand) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceBrand.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceBrand proto.InternalMessageInfo

func (m *EndDeviceBrand) GetBrandID() string {
	if m != nil {
		return m.BrandID
	}
	return ""
}

func (m *EndDeviceBrand) GetBrandName() string {
	if m != nil {
		return m.BrandName
	}
	return ""
}

func (m *EndDeviceBrand) GetPrivateEnterpriseNumber() uint32 {
	if m != nil {
		return m.PrivateEnterpriseNumber
	}
	return 0
}

func (m *EndDeviceBrand) GetOrganizationUniqueIdentifiers() []string {
	if m != nil {
		return m.OrganizationUniqueIdentifiers
	}
	return nil
}

func (m *EndDeviceBrand) GetVendorId() uint32 {
	if m != nil {
		return m.VendorId
	}
	return 0
}

func (m *EndDeviceBrand) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *EndDeviceBrand) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *EndDeviceBrand) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

type EndDeviceDefinition struct {
	ModelID              string                                   `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	Name                 string                                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string                                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	HardwareVersions     []*EndDeviceDefinition_Version           `protobuf:"bytes,4,rep,name=hardware_versions,json=hardwareVersions,proto3" json:"hardware_versions,omitempty"`
	FirmwareVersions     []*EndDeviceDefinition_FirmwareVersion   `protobuf:"bytes,5,rep,name=firmware_versions,json=firmwareVersions,proto3" json:"firmware_versions,omitempty"`
	Sensors              []string                                 `protobuf:"bytes,6,rep,name=sensors,proto3" json:"sensors,omitempty"`
	Dimensions           *EndDeviceDefinition_Dimensions          `protobuf:"bytes,7,opt,name=dimensions,proto3" json:"dimensions,omitempty"`
	Weight               float32                                  `protobuf:"fixed32,8,opt,name=weight,proto3" json:"weight,omitempty"`
	Battery              *EndDeviceDefinition_Battery             `protobuf:"bytes,9,opt,name=battery,proto3" json:"battery,omitempty"`
	OperatingConditions  *EndDeviceDefinition_OperatingConditions `protobuf:"bytes,10,opt,name=operating_conditions,json=operatingConditions,proto3" json:"operating_conditions,omitempty"`
	IPCode               string                                   `protobuf:"bytes,11,opt,name=ip_code,json=ipCode,proto3" json:"ip_code,omitempty"`
	KeyProvisioning      []string                                 `protobuf:"bytes,12,rep,name=key_provisioning,json=keyProvisioning,proto3" json:"key_provisioning,omitempty"`
	KeySecurity          string                                   `protobuf:"bytes,13,opt,name=key_security,json=keySecurity,proto3" json:"key_security,omitempty"`
	Photos               *EndDeviceDefinition_Photos              `protobuf:"bytes,14,opt,name=photos,proto3" json:"photos,omitempty"`
	Videos               *EndDeviceDefinition_Videos              `protobuf:"bytes,15,opt,name=videos,proto3" json:"videos,omitempty"`
	ProductURL           string                                   `protobuf:"bytes,16,opt,name=product_url,json=productUrl,proto3" json:"product_url,omitempty"`
	DatasheetURL         string                                   `protobuf:"bytes,17,opt,name=datasheet_url,json=datasheetUrl,proto3" json:"datasheet_url,omitempty"`
	Compliances          *EndDeviceDefinition_Compliances         `protobuf:"bytes,18,opt,name=compliances,proto3" json:"compliances,omitempty"`
	AdditionalRadios     []string                                 `protobuf:"bytes,19,rep,name=additional_radios,json=additionalRadios,proto3" json:"additional_radios,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *EndDeviceDefinition) Reset()      { *m = EndDeviceDefinition{} }
func (*EndDeviceDefinition) ProtoMessage() {}
func (*EndDeviceDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1}
}
func (m *EndDeviceDefinition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceDefinition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceDefinition.Merge(m, src)
}
func (m *EndDeviceDefinition) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceDefinition proto.InternalMessageInfo

func (m *EndDeviceDefinition) GetModelID() string {
	if m != nil {
		return m.ModelID
	}
	return ""
}

func (m *EndDeviceDefinition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EndDeviceDefinition) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *EndDeviceDefinition) GetHardwareVersions() []*EndDeviceDefinition_Version {
	if m != nil {
		return m.HardwareVersions
	}
	return nil
}

func (m *EndDeviceDefinition) GetFirmwareVersions() []*EndDeviceDefinition_FirmwareVersion {
	if m != nil {
		return m.FirmwareVersions
	}
	return nil
}

func (m *EndDeviceDefinition) GetSensors() []string {
	if m != nil {
		return m.Sensors
	}
	return nil
}

func (m *EndDeviceDefinition) GetDimensions() *EndDeviceDefinition_Dimensions {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *EndDeviceDefinition) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *EndDeviceDefinition) GetBattery() *EndDeviceDefinition_Battery {
	if m != nil {
		return m.Battery
	}
	return nil
}

func (m *EndDeviceDefinition) GetOperatingConditions() *EndDeviceDefinition_OperatingConditions {
	if m != nil {
		return m.OperatingConditions
	}
	return nil
}

func (m *EndDeviceDefinition) GetIPCode() string {
	if m != nil {
		return m.IPCode
	}
	return ""
}

func (m *EndDeviceDefinition) GetKeyProvisioning() []string {
	if m != nil {
		return m.KeyProvisioning
	}
	return nil
}

func (m *EndDeviceDefinition) GetKeySecurity() string {
	if m != nil {
		return m.KeySecurity
	}
	return ""
}

func (m *EndDeviceDefinition) GetPhotos() *EndDeviceDefinition_Photos {
	if m != nil {
		return m.Photos
	}
	return nil
}

func (m *EndDeviceDefinition) GetVideos() *EndDeviceDefinition_Videos {
	if m != nil {
		return m.Videos
	}
	return nil
}

func (m *EndDeviceDefinition) GetProductURL() string {
	if m != nil {
		return m.ProductURL
	}
	return ""
}

func (m *EndDeviceDefinition) GetDatasheetURL() string {
	if m != nil {
		return m.DatasheetURL
	}
	return ""
}

func (m *EndDeviceDefinition) GetCompliances() *EndDeviceDefinition_Compliances {
	if m != nil {
		return m.Compliances
	}
	return nil
}

func (m *EndDeviceDefinition) GetAdditionalRadios() []string {
	if m != nil {
		return m.AdditionalRadios
	}
	return nil
}

type EndDeviceDefinition_Version struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Numeric              uint32   `protobuf:"varint,2,opt,name=numeric,proto3" json:"numeric,omitempty"`
	PartNumber           string   `protobuf:"bytes,3,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceDefinition_Version) Reset()      { *m = EndDeviceDefinition_Version{} }
func (*EndDeviceDefinition_Version) ProtoMessage() {}
func (*EndDeviceDefinition_Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 0}
}
func (m *EndDeviceDefinition_Version) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceDefinition_Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceDefinition_Version.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceDefinition_Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceDefinition_Version.Merge(m, src)
}
func (m *EndDeviceDefinition_Version) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceDefinition_Version) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceDefinition_Version.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceDefinition_Version proto.InternalMessageInfo

func (m *EndDeviceDefinition_Version) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *EndDeviceDefinition_Version) GetNumeric() uint32 {
	if m != nil {
		return m.Numeric
	}
	return 0
}

func (m *EndDeviceDefinition_Version) GetPartNumber() string {
	if m != nil {
		return m.PartNumber
	}
	return ""
}

type EndDeviceDefinition_FirmwareVersion struct {
	Version              string                                                  `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Numeric              uint32                                                  `protobuf:"varint,2,opt,name=numeric,proto3" json:"numeric,omitempty"`
	HardwareVersions     []string                                                `protobuf:"bytes,3,rep,name=hardware_versions,json=hardwareVersions,proto3" json:"hardware_versions,omitempty"`
	Profiles             map[string]*EndDeviceDefinition_FirmwareVersion_Profile `protobuf:"bytes,4,rep,name=profiles,proto3" json:"profiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                                                `json:"-"`
	XXX_sizecache        int32                                                   `json:"-"`
}

func (m *EndDeviceDefinition_FirmwareVersion) Reset()      { *m = EndDeviceDefinition_FirmwareVersion{} }
func (*EndDeviceDefinition_FirmwareVersion) ProtoMessage() {}
func (*EndDeviceDefinition_FirmwareVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 1}
}
func (m *EndDeviceDefinition_FirmwareVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceDefinition_FirmwareVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceDefinition_FirmwareVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceDefinition_FirmwareVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceDefinition_FirmwareVersion.Merge(m, src)
}
func (m *EndDeviceDefinition_FirmwareVersion) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceDefinition_FirmwareVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceDefinition_FirmwareVersion.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceDefinition_FirmwareVersion proto.InternalMessageInfo

func (m *EndDeviceDefinition_FirmwareVersion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *EndDeviceDefinition_FirmwareVersion) GetNumeric() uint32 {
	if m != nil {
		return m.Numeric
	}
	return 0
}

func (m *EndDeviceDefinition_FirmwareVersion) GetHardwareVersions() []string {
	if m != nil {
		return m.HardwareVersions
	}
	return nil
}

func (m *EndDeviceDefinition_FirmwareVersion) GetProfiles() map[string]*EndDeviceDefinition_FirmwareVersion_Profile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

type EndDeviceDefinition_FirmwareVersion_Profile struct {
	ProfileID            string   `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	LoRaWANCertified     bool     `protobuf:"varint,2,opt,name=lorawan_certified,json=lorawanCertified,proto3" json:"lorawan_certified,omitempty"`
	CodecID              string   `protobuf:"bytes,3,opt,name=codec_id,json=codecId,proto3" json:"codec_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceDefinition_FirmwareVersion_Profile) Reset() {
	*m = EndDeviceDefinition_FirmwareVersion_Profile{}
}
func (*EndDeviceDefinition_FirmwareVersion_Profile) ProtoMessage() {}
func (*EndDeviceDefinition_FirmwareVersion_Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 1, 0}
}
func (m *EndDeviceDefinition_FirmwareVersion_Profile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceDefinition_FirmwareVersion_Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceDefinition_FirmwareVersion_Profile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceDefinition_FirmwareVersion_Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceDefinition_FirmwareVersion_Profile.Merge(m, src)
}
func (m *EndDeviceDefinition_FirmwareVersion_Profile) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceDefinition_FirmwareVersion_Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceDefinition_FirmwareVersion_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceDefinition_FirmwareVersion_Profile proto.InternalMessageInfo

func (m *EndDeviceDefinition_FirmwareVersion_Profile) GetProfileID() string {
	if m != nil {
		return m.ProfileID
	}
	return ""
}

func (m *EndDeviceDefinition_FirmwareVersion_Profile) GetLoRaWANCertified() bool {
	if m != nil {
		return m.LoRaWANCertified
	}
	return false
}

func (m *EndDeviceDefinition_FirmwareVersion_Profile) GetCodecID() string {
	if m != nil {
		return m.CodecID
	}
	return ""
}

type EndDeviceDefinition_Dimensions struct {
	Width                float32  `protobuf:"fixed32,1,opt,name=width,proto3" json:"width,omitempty"`
	Height               float32  `protobuf:"fixed32,2,opt,name=height,proto3" json:"height,omitempty"`
	Diameter             float32  `protobuf:"fixed32,3,opt,name=diameter,proto3" json:"diameter,omitempty"`
	Length               float32  `protobuf:"fixed32,4,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceDefinition_Dimensions) Reset()      { *m = EndDeviceDefinition_Dimensions{} }
func (*EndDeviceDefinition_Dimensions) ProtoMessage() {}
func (*EndDeviceDefinition_Dimensions) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 2}
}
func (m *EndDeviceDefinition_Dimensions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceDefinition_Dimensions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceDefinition_Dimensions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceDefinition_Dimensions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceDefinition_Dimensions.Merge(m, src)
}
func (m *EndDeviceDefinition_Dimensions) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceDefinition_Dimensions) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceDefinition_Dimensions.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceDefinition_Dimensions proto.InternalMessageInfo

func (m *EndDeviceDefinition_Dimensions) GetWidth() float32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *EndDeviceDefinition_Dimensions) GetHeight() float32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *EndDeviceDefinition_Dimensions) GetDiameter() float32 {
	if m != nil {
		return m.Diameter
	}
	return 0
}

func (m *EndDeviceDefinition_Dimensions) GetLength() float32 {
	if m != nil {
		return m.Length
	}
	return 0
}

type EndDeviceDefinition_Battery struct {
	Replaceable          *types.BoolValue `protobuf:"bytes,1,opt,name=replaceable,proto3" json:"replaceable,omitempty"`
	Type                 string           `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *EndDeviceDefinition_Battery) Reset()      { *m = EndDeviceDefinition_Battery{} }
func (*EndDeviceDefinition_Battery) ProtoMessage() {}
func (*EndDeviceDefinition_Battery) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 3}
}
func (m *EndDeviceDefinition_Battery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceDefinition_Battery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceDefinition_Battery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceDefinition_Battery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceDefinition_Battery.Merge(m, src)
}
func (m *EndDeviceDefinition_Battery) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceDefinition_Battery) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceDefinition_Battery.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceDefinition_Battery proto.InternalMessageInfo

func (m *EndDeviceDefinition_Battery) GetReplaceable() *types.BoolValue {
	if m != nil {
		return m.Replaceable
	}
	return nil
}

func (m *EndDeviceDefinition_Battery) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type EndDeviceDefinition_OperatingConditions struct {
	Temperature          *EndDeviceDefinition_OperatingConditions_Limits `protobuf:"bytes,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	RelativeHumidity     *EndDeviceDefinition_OperatingConditions_Limits `protobuf:"bytes,2,opt,name=relative_humidity,json=relativeHumidity,proto3" json:"relative_humidity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                        `json:"-"`
	XXX_sizecache        int32                                           `json:"-"`
}

func (m *EndDeviceDefinition_OperatingConditions) Reset() {
	*m = EndDeviceDefinition_OperatingConditions{}
}
func (*EndDeviceDefinition_OperatingConditions) ProtoMessage() {}
func (*EndDeviceDefinition_OperatingConditions) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 4}
}
func (m *EndDeviceDefinition_OperatingConditions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceDefinition_OperatingConditions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceDefinition_OperatingConditions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceDefinition_OperatingConditions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceDefinition_OperatingConditions.Merge(m, src)
}
func (m *EndDeviceDefinition_OperatingConditions) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceDefinition_OperatingConditions) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceDefinition_OperatingConditions.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceDefinition_OperatingConditions proto.InternalMessageInfo

func (m *EndDeviceDefinition_OperatingConditions) GetTemperature() *EndDeviceDefinition_OperatingConditions_Limits {
	if m != nil {
		return m.Temperature
	}
	return nil
}

func (m *EndDeviceDefinition_OperatingConditions) GetRelativeHumidity() *EndDeviceDefinition_OperatingConditions_Limits {
	if m != nil {
		return m.RelativeHumidity
	}
	return nil
}

type EndDeviceDefinition_OperatingConditions_Limits struct {
	Min                  *types.FloatValue `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	Max                  *types.FloatValue `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EndDeviceDefinition_OperatingConditions_Limits) Reset() {
	*m = EndDeviceDefinition_OperatingConditions_Limits{}
}
func (*EndDeviceDefinition_OperatingConditions_Limits) ProtoMessage() {}
func (*EndDeviceDefinition_OperatingConditions_Limits) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 4, 0}
}
func (m *EndDeviceDefinition_OperatingConditions_Limits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceDefinition_OperatingConditions_Limits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceDefinition_OperatingConditions_Limits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceDefinition_OperatingConditions_Limits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceDefinition_OperatingConditions_Limits.Merge(m, src)
}
func (m *EndDeviceDefinition_OperatingConditions_Limits) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceDefinition_OperatingConditions_Limits) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceDefinition_OperatingConditions_Limits.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceDefinition_OperatingConditions_Limits proto.InternalMessageInfo

func (m *EndDeviceDefinition_OperatingConditions_Limits) GetMin() *types.FloatValue {
	if m != nil {
		return m.Min
	}
	return nil
}

func (m *EndDeviceDefinition_OperatingConditions_Limits) GetMax() *types.FloatValue {
	if m != nil {
		return m.Max
	}
	return nil
}

type EndDeviceDefinition_Photos struct {
	Main                 string   `protobuf:"bytes,1,opt,name=main,proto3" json:"main,omitempty"`
	Other                []string `protobuf:"bytes,2,rep,name=other,proto3" json:"other,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceDefinition_Photos) Reset()      { *m = EndDeviceDefinition_Photos{} }
func (*EndDeviceDefinition_Photos) ProtoMessage() {}
func (*EndDeviceDefinition_Photos) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 5}
}
func (m *EndDeviceDefinition_Photos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceDefinition_Photos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceDefinition_Photos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceDefinition_Photos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceDefinition_Photos.Merge(m, src)
}
func (m *EndDeviceDefinition_Photos) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceDefinition_Photos) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceDefinition_Photos.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceDefinition_Photos proto.InternalMessageInfo

func (m *EndDeviceDefinition_Photos) GetMain() string {
	if m != nil {
		return m.Main
	}
	return ""
}

func (m *EndDeviceDefinition_Photos) GetOther() []string {
	if m != nil {
		return m.Other
	}
	return nil
}

type EndDeviceDefinition_Videos struct {
	Main                 string   `protobuf:"bytes,1,opt,name=main,proto3" json:"main,omitempty"`
	Other                []string `protobuf:"bytes,2,rep,name=other,proto3" json:"other,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceDefinition_Videos) Reset()      { *m = EndDeviceDefinition_Videos{} }
func (*EndDeviceDefinition_Videos) ProtoMessage() {}
func (*EndDeviceDefinition_Videos) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 6}
}
func (m *EndDeviceDefinition_Videos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceDefinition_Videos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceDefinition_Videos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceDefinition_Videos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceDefinition_Videos.Merge(m, src)
}
func (m *EndDeviceDefinition_Videos) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceDefinition_Videos) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceDefinition_Videos.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceDefinition_Videos proto.InternalMessageInfo

func (m *EndDeviceDefinition_Videos) GetMain() string {
	if m != nil {
		return m.Main
	}
	return ""
}

func (m *EndDeviceDefinition_Videos) GetOther() []string {
	if m != nil {
		return m.Other
	}
	return nil
}

type EndDeviceDefinition_Compliances struct {
	Safety               []*EndDeviceDefinition_Compliances_Compliance `protobuf:"bytes,1,rep,name=safety,proto3" json:"safety,omitempty"`
	RadioEquipment       []*EndDeviceDefinition_Compliances_Compliance `protobuf:"bytes,2,rep,name=radio_equipment,json=radioEquipment,proto3" json:"radio_equipment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *EndDeviceDefinition_Compliances) Reset()      { *m = EndDeviceDefinition_Compliances{} }
func (*EndDeviceDefinition_Compliances) ProtoMessage() {}
func (*EndDeviceDefinition_Compliances) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 7}
}
func (m *EndDeviceDefinition_Compliances) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceDefinition_Compliances) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceDefinition_Compliances.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceDefinition_Compliances) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceDefinition_Compliances.Merge(m, src)
}
func (m *EndDeviceDefinition_Compliances) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceDefinition_Compliances) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceDefinition_Compliances.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceDefinition_Compliances proto.InternalMessageInfo

func (m *EndDeviceDefinition_Compliances) GetSafety() []*EndDeviceDefinition_Compliances_Compliance {
	if m != nil {
		return m.Safety
	}
	return nil
}

func (m *EndDeviceDefinition_Compliances) GetRadioEquipment() []*EndDeviceDefinition_Compliances_Compliance {
	if m != nil {
		return m.RadioEquipment
	}
	return nil
}

type EndDeviceDefinition_Compliances_Compliance struct {
	Body                 string   `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Norm                 string   `protobuf:"bytes,2,opt,name=norm,proto3" json:"norm,omitempty"`
	Standard             string   `protobuf:"bytes,3,opt,name=standard,proto3" json:"standard,omitempty"`
	Version              string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceDefinition_Compliances_Compliance) Reset() {
	*m = EndDeviceDefinition_Compliances_Compliance{}
}
func (*EndDeviceDefinition_Compliances_Compliance) ProtoMessage() {}
func (*EndDeviceDefinition_Compliances_Compliance) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 7, 0}
}
func (m *EndDeviceDefinition_Compliances_Compliance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceDefinition_Compliances_Compliance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceDefinition_Compliances_Compliance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceDefinition_Compliances_Compliance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceDefinition_Compliances_Compliance.Merge(m, src)
}
func (m *EndDeviceDefinition_Compliances_Compliance) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceDefinition_Compliances_Compliance) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceDefinition_Compliances_Compliance.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceDefinition_Compliances_Compliance proto.InternalMessageInfo

func (m *EndDeviceDefinition_Compliances_Compliance) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *EndDeviceDefinition_Compliances_Compliance) GetNorm() string {
	if m != nil {
		return m.Norm
	}
	return ""
}

func (m *EndDeviceDefinition_Compliances_Compliance) GetStandard() string {
	if m != nil {
		return m.Standard
	}
	return ""
}

func (m *EndDeviceDefinition_Compliances_Compliance) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type ListEndDeviceBrandsRequest struct {
	// Optionally limit to a specific brand ID
	BrandID string `protobuf:"bytes,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	// Limit (for pagination)
	Limit *types.UInt32Value `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Offset (for pagination)
	Offset *types.UInt32Value `protobuf:"bytes,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// Order (for pagination)
	OrderBy              string   `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListEndDeviceBrandsRequest) Reset()      { *m = ListEndDeviceBrandsRequest{} }
func (*ListEndDeviceBrandsRequest) ProtoMessage() {}
func (*ListEndDeviceBrandsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{2}
}
func (m *ListEndDeviceBrandsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEndDeviceBrandsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEndDeviceBrandsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListEndDeviceBrandsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEndDeviceBrandsRequest.Merge(m, src)
}
func (m *ListEndDeviceBrandsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListEndDeviceBrandsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEndDeviceBrandsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListEndDeviceBrandsRequest proto.InternalMessageInfo

func (m *ListEndDeviceBrandsRequest) GetBrandID() string {
	if m != nil {
		return m.BrandID
	}
	return ""
}

func (m *ListEndDeviceBrandsRequest) GetLimit() *types.UInt32Value {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *ListEndDeviceBrandsRequest) GetOffset() *types.UInt32Value {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *ListEndDeviceBrandsRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

type ListEndDeviceDefinitionsRequest struct {
	// Query end devices from a specific brand
	BrandID string `protobuf:"bytes,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	// Query end devices matching a specific model
	ModelID string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Query end devices matching a search string
	Search string `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
	// Order end devices
	OrderBy string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Limit number of results.
	Limit *types.UInt32Value `protobuf:"bytes,5,opt,name=limit,proto3" json:"limit,omitempty"`
	// Start returning devices at offset.
	Offset *types.UInt32Value `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	// Field mask paths.
	FieldMask            *types.FieldMask `protobuf:"bytes,7,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListEndDeviceDefinitionsRequest) Reset()      { *m = ListEndDeviceDefinitionsRequest{} }
func (*ListEndDeviceDefinitionsRequest) ProtoMessage() {}
func (*ListEndDeviceDefinitionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{3}
}
func (m *ListEndDeviceDefinitionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEndDeviceDefinitionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEndDeviceDefinitionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListEndDeviceDefinitionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEndDeviceDefinitionsRequest.Merge(m, src)
}
func (m *ListEndDeviceDefinitionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListEndDeviceDefinitionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEndDeviceDefinitionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListEndDeviceDefinitionsRequest proto.InternalMessageInfo

func (m *ListEndDeviceDefinitionsRequest) GetBrandID() string {
	if m != nil {
		return m.BrandID
	}
	return ""
}

func (m *ListEndDeviceDefinitionsRequest) GetModelID() string {
	if m != nil {
		return m.ModelID
	}
	return ""
}

func (m *ListEndDeviceDefinitionsRequest) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

func (m *ListEndDeviceDefinitionsRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func (m *ListEndDeviceDefinitionsRequest) GetLimit() *types.UInt32Value {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *ListEndDeviceDefinitionsRequest) GetOffset() *types.UInt32Value {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *ListEndDeviceDefinitionsRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

type ListEndDeviceBrandsResponse struct {
	Brands               []*EndDeviceBrand `protobuf:"bytes,1,rep,name=brands,proto3" json:"brands,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListEndDeviceBrandsResponse) Reset()      { *m = ListEndDeviceBrandsResponse{} }
func (*ListEndDeviceBrandsResponse) ProtoMessage() {}
func (*ListEndDeviceBrandsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{4}
}
func (m *ListEndDeviceBrandsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEndDeviceBrandsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEndDeviceBrandsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListEndDeviceBrandsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEndDeviceBrandsResponse.Merge(m, src)
}
func (m *ListEndDeviceBrandsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListEndDeviceBrandsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEndDeviceBrandsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListEndDeviceBrandsResponse proto.InternalMessageInfo

func (m *ListEndDeviceBrandsResponse) GetBrands() []*EndDeviceBrand {
	if m != nil {
		return m.Brands
	}
	return nil
}

type ListEndDeviceDefinitionsResponse struct {
	Definitions          []*EndDeviceDefinition `protobuf:"bytes,1,rep,name=definitions,proto3" json:"definitions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ListEndDeviceDefinitionsResponse) Reset()      { *m = ListEndDeviceDefinitionsResponse{} }
func (*ListEndDeviceDefinitionsResponse) ProtoMessage() {}
func (*ListEndDeviceDefinitionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{5}
}
func (m *ListEndDeviceDefinitionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEndDeviceDefinitionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEndDeviceDefinitionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListEndDeviceDefinitionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEndDeviceDefinitionsResponse.Merge(m, src)
}
func (m *ListEndDeviceDefinitionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListEndDeviceDefinitionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEndDeviceDefinitionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListEndDeviceDefinitionsResponse proto.InternalMessageInfo

func (m *ListEndDeviceDefinitionsResponse) GetDefinitions() []*EndDeviceDefinition {
	if m != nil {
		return m.Definitions
	}
	return nil
}

func init() {
	proto.RegisterType((*EndDeviceBrand)(nil), "ttn.lorawan.v3.EndDeviceBrand")
	golang_proto.RegisterType((*EndDeviceBrand)(nil), "ttn.lorawan.v3.EndDeviceBrand")
	proto.RegisterType((*EndDeviceDefinition)(nil), "ttn.lorawan.v3.EndDeviceDefinition")
	golang_proto.RegisterType((*EndDeviceDefinition)(nil), "ttn.lorawan.v3.EndDeviceDefinition")
	proto.RegisterType((*EndDeviceDefinition_Version)(nil), "ttn.lorawan.v3.EndDeviceDefinition.Version")
	golang_proto.RegisterType((*EndDeviceDefinition_Version)(nil), "ttn.lorawan.v3.EndDeviceDefinition.Version")
	proto.RegisterType((*EndDeviceDefinition_FirmwareVersion)(nil), "ttn.lorawan.v3.EndDeviceDefinition.FirmwareVersion")
	golang_proto.RegisterType((*EndDeviceDefinition_FirmwareVersion)(nil), "ttn.lorawan.v3.EndDeviceDefinition.FirmwareVersion")
	proto.RegisterMapType((map[string]*EndDeviceDefinition_FirmwareVersion_Profile)(nil), "ttn.lorawan.v3.EndDeviceDefinition.FirmwareVersion.ProfilesEntry")
	golang_proto.RegisterMapType((map[string]*EndDeviceDefinition_FirmwareVersion_Profile)(nil), "ttn.lorawan.v3.EndDeviceDefinition.FirmwareVersion.ProfilesEntry")
	proto.RegisterType((*EndDeviceDefinition_FirmwareVersion_Profile)(nil), "ttn.lorawan.v3.EndDeviceDefinition.FirmwareVersion.Profile")
	golang_proto.RegisterType((*EndDeviceDefinition_FirmwareVersion_Profile)(nil), "ttn.lorawan.v3.EndDeviceDefinition.FirmwareVersion.Profile")
	proto.RegisterType((*EndDeviceDefinition_Dimensions)(nil), "ttn.lorawan.v3.EndDeviceDefinition.Dimensions")
	golang_proto.RegisterType((*EndDeviceDefinition_Dimensions)(nil), "ttn.lorawan.v3.EndDeviceDefinition.Dimensions")
	proto.RegisterType((*EndDeviceDefinition_Battery)(nil), "ttn.lorawan.v3.EndDeviceDefinition.Battery")
	golang_proto.RegisterType((*EndDeviceDefinition_Battery)(nil), "ttn.lorawan.v3.EndDeviceDefinition.Battery")
	proto.RegisterType((*EndDeviceDefinition_OperatingConditions)(nil), "ttn.lorawan.v3.EndDeviceDefinition.OperatingConditions")
	golang_proto.RegisterType((*EndDeviceDefinition_OperatingConditions)(nil), "ttn.lorawan.v3.EndDeviceDefinition.OperatingConditions")
	proto.RegisterType((*EndDeviceDefinition_OperatingConditions_Limits)(nil), "ttn.lorawan.v3.EndDeviceDefinition.OperatingConditions.Limits")
	golang_proto.RegisterType((*EndDeviceDefinition_OperatingConditions_Limits)(nil), "ttn.lorawan.v3.EndDeviceDefinition.OperatingConditions.Limits")
	proto.RegisterType((*EndDeviceDefinition_Photos)(nil), "ttn.lorawan.v3.EndDeviceDefinition.Photos")
	golang_proto.RegisterType((*EndDeviceDefinition_Photos)(nil), "ttn.lorawan.v3.EndDeviceDefinition.Photos")
	proto.RegisterType((*EndDeviceDefinition_Videos)(nil), "ttn.lorawan.v3.EndDeviceDefinition.Videos")
	golang_proto.RegisterType((*EndDeviceDefinition_Videos)(nil), "ttn.lorawan.v3.EndDeviceDefinition.Videos")
	proto.RegisterType((*EndDeviceDefinition_Compliances)(nil), "ttn.lorawan.v3.EndDeviceDefinition.Compliances")
	golang_proto.RegisterType((*EndDeviceDefinition_Compliances)(nil), "ttn.lorawan.v3.EndDeviceDefinition.Compliances")
	proto.RegisterType((*EndDeviceDefinition_Compliances_Compliance)(nil), "ttn.lorawan.v3.EndDeviceDefinition.Compliances.Compliance")
	golang_proto.RegisterType((*EndDeviceDefinition_Compliances_Compliance)(nil), "ttn.lorawan.v3.EndDeviceDefinition.Compliances.Compliance")
	proto.RegisterType((*ListEndDeviceBrandsRequest)(nil), "ttn.lorawan.v3.ListEndDeviceBrandsRequest")
	golang_proto.RegisterType((*ListEndDeviceBrandsRequest)(nil), "ttn.lorawan.v3.ListEndDeviceBrandsRequest")
	proto.RegisterType((*ListEndDeviceDefinitionsRequest)(nil), "ttn.lorawan.v3.ListEndDeviceDefinitionsRequest")
	golang_proto.RegisterType((*ListEndDeviceDefinitionsRequest)(nil), "ttn.lorawan.v3.ListEndDeviceDefinitionsRequest")
	proto.RegisterType((*ListEndDeviceBrandsResponse)(nil), "ttn.lorawan.v3.ListEndDeviceBrandsResponse")
	golang_proto.RegisterType((*ListEndDeviceBrandsResponse)(nil), "ttn.lorawan.v3.ListEndDeviceBrandsResponse")
	proto.RegisterType((*ListEndDeviceDefinitionsResponse)(nil), "ttn.lorawan.v3.ListEndDeviceDefinitionsResponse")
	golang_proto.RegisterType((*ListEndDeviceDefinitionsResponse)(nil), "ttn.lorawan.v3.ListEndDeviceDefinitionsResponse")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/devicerepository.proto", fileDescriptor_c0145ad4e3f42c22)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/devicerepository.proto", fileDescriptor_c0145ad4e3f42c22)
}

var fileDescriptor_c0145ad4e3f42c22 = []byte{
	// 1996 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x4d, 0x6c, 0x1b, 0xc7,
	0x15, 0xe6, 0x52, 0x16, 0x25, 0x0e, 0x2d, 0x9b, 0x1a, 0xbb, 0xf1, 0x86, 0x76, 0x96, 0x32, 0xe3,
	0x06, 0x4a, 0x6d, 0x92, 0x29, 0xd5, 0x34, 0xad, 0x5b, 0xd4, 0x30, 0x2d, 0x39, 0x25, 0xe0, 0x1f,
	0x79, 0x5a, 0x39, 0x85, 0x0d, 0x87, 0x1e, 0x72, 0x87, 0xe4, 0x84, 0xbb, 0x3b, 0xeb, 0xd9, 0x21,
	0x65, 0xc6, 0x30, 0x10, 0xe4, 0xd2, 0x9c, 0x8a, 0xa2, 0xbd, 0xf4, 0x58, 0x14, 0x28, 0x90, 0x63,
	0x50, 0xf4, 0x90, 0x63, 0x8e, 0x3e, 0xb4, 0x40, 0x80, 0x00, 0x45, 0x4e, 0x42, 0x44, 0xf6, 0x90,
	0xa3, 0x8f, 0x81, 0x4f, 0xc1, 0xcc, 0xce, 0x2e, 0x29, 0x53, 0x4a, 0x68, 0xc7, 0x27, 0xce, 0x7b,
	0xf3, 0xbd, 0x6f, 0xde, 0x7b, 0x3b, 0xf3, 0xed, 0x2c, 0xc1, 0xaa, 0xc3, 0x38, 0xde, 0xc6, 0x5e,
	0x31, 0x10, 0xb8, 0xd9, 0x2d, 0x63, 0x9f, 0x96, 0x6d, 0xd2, 0xa7, 0x4d, 0xc2, 0x89, 0xcf, 0x02,
	0x2a, 0x18, 0x1f, 0x94, 0x7c, 0xce, 0x04, 0x83, 0x47, 0x84, 0xf0, 0x4a, 0x1a, 0x5d, 0xea, 0xaf,
	0xe5, 0x2e, 0xb6, 0xa9, 0xe8, 0xf4, 0x1a, 0xa5, 0x26, 0x73, 0xcb, 0xc4, 0xeb, 0xb3, 0x81, 0xcf,
	0xd9, 0xfd, 0x41, 0x59, 0x81, 0x9b, 0xc5, 0x36, 0xf1, 0x8a, 0x7d, 0xec, 0x50, 0x1b, 0x0b, 0x52,
	0x9e, 0x1a, 0x84, 0x94, 0xb9, 0xe2, 0x04, 0x45, 0x9b, 0xb5, 0x59, 0x18, 0xdc, 0xe8, 0xb5, 0x94,
	0xa5, 0x0c, 0x35, 0xd2, 0xf0, 0x53, 0x6d, 0xc6, 0xda, 0x0e, 0x51, 0x49, 0x62, 0xcf, 0x63, 0x02,
	0x0b, 0xca, 0xbc, 0x40, 0xcf, 0x5a, 0x7a, 0x36, 0xe6, 0xd8, 0xe6, 0xd8, 0xf7, 0x09, 0x8f, 0xe6,
	0x57, 0x9e, 0x9e, 0x6f, 0x51, 0xe2, 0xd8, 0x75, 0x17, 0x07, 0x5d, 0x8d, 0x28, 0x4c, 0xf7, 0x82,
	0x78, 0x76, 0x3d, 0xec, 0x47, 0xc4, 0x32, 0x8d, 0x71, 0x49, 0x10, 0xe0, 0x36, 0xd1, 0xeb, 0x14,
	0x46, 0x49, 0x70, 0x64, 0xc3, 0xb3, 0xd7, 0x55, 0x54, 0x95, 0x63, 0xcf, 0x86, 0x57, 0xc1, 0x62,
	0x43, 0x0e, 0xea, 0xd4, 0x36, 0x8d, 0x15, 0x63, 0x35, 0x5d, 0xad, 0x3c, 0xa9, 0x9e, 0xe1, 0x05,
	0xf3, 0x4c, 0xc5, 0x7a, 0xf7, 0x36, 0x2e, 0xbe, 0xff, 0x46, 0xf1, 0x97, 0x77, 0x56, 0x2f, 0x9c,
	0xbf, 0x5d, 0xbc, 0x73, 0x21, 0x32, 0x5f, 0x7f, 0x50, 0x39, 0xf7, 0xf0, 0xcc, 0x70, 0x27, 0xbf,
	0xa0, 0x38, 0x6a, 0xeb, 0x68, 0x41, 0x71, 0xd4, 0x6c, 0xf8, 0x0a, 0x00, 0x21, 0x9d, 0x87, 0x5d,
	0x62, 0x26, 0x25, 0x21, 0x4a, 0x2b, 0xcf, 0x35, 0xec, 0x12, 0x78, 0x1e, 0xbc, 0xec, 0x73, 0xda,
	0xc7, 0x82, 0xd4, 0x89, 0x27, 0x08, 0xf7, 0x39, 0x0d, 0x48, 0xdd, 0xeb, 0xb9, 0x0d, 0xc2, 0xcd,
	0xb9, 0x15, 0x63, 0x75, 0x09, 0x9d, 0xd0, 0x80, 0x8d, 0x78, 0xfe, 0x9a, 0x9a, 0x86, 0x97, 0x41,
	0x9e, 0xf1, 0x36, 0xf6, 0xe8, 0xfb, 0xaa, 0xb7, 0xf5, 0x9e, 0x47, 0xef, 0xf5, 0x48, 0x9d, 0xda,
	0xc4, 0x13, 0xb4, 0x45, 0x09, 0x0f, 0xcc, 0x43, 0x2b, 0x73, 0xab, 0x69, 0xf4, 0xca, 0x24, 0x6c,
	0x4b, 0xa1, 0x6a, 0x63, 0x10, 0x3c, 0x09, 0xd2, 0x7d, 0xe2, 0xd9, 0x8c, 0xcb, 0x92, 0xe7, 0xd5,
	0x9a, 0x8b, 0xa1, 0xa3, 0x66, 0x43, 0x13, 0x2c, 0x6c, 0x93, 0x46, 0x40, 0x05, 0x31, 0x53, 0x2a,
	0xf9, 0xc8, 0x84, 0xc7, 0xc1, 0x3c, 0x71, 0x31, 0x75, 0xcc, 0x05, 0xe5, 0x0f, 0x0d, 0x08, 0xc1,
	0x21, 0x87, 0xb5, 0x99, 0xb9, 0xa8, 0x9c, 0x6a, 0x5c, 0xf8, 0xe2, 0x38, 0x38, 0x16, 0x77, 0x79,
	0x9d, 0xb4, 0xa8, 0x47, 0x65, 0x26, 0xf0, 0x35, 0xb0, 0xe8, 0x32, 0x9b, 0x38, 0xe3, 0x56, 0x67,
	0x64, 0x0f, 0xaf, 0x4a, 0x9f, 0xec, 0xa1, 0x9a, 0xac, 0xd9, 0x92, 0x73, 0xa2, 0x7b, 0x6a, 0x0c,
	0x57, 0x40, 0xc6, 0x26, 0x41, 0x93, 0x53, 0x5f, 0x52, 0xa9, 0x56, 0xa5, 0xd1, 0xa4, 0x0b, 0xfe,
	0x01, 0x2c, 0x77, 0x30, 0xb7, 0xb7, 0x31, 0x27, 0xf5, 0x3e, 0xe1, 0x81, 0xdc, 0x7e, 0xaa, 0x21,
	0x99, 0xca, 0xd9, 0xd2, 0xde, 0xf3, 0x51, 0xda, 0x27, 0xbb, 0xd2, 0xcd, 0x30, 0x06, 0x65, 0x23,
	0x16, 0xed, 0x08, 0xe0, 0x5d, 0xb0, 0xdc, 0xa2, 0xdc, 0xdd, 0xcb, 0x3c, 0xaf, 0x98, 0xd7, 0x66,
	0x61, 0xbe, 0xac, 0x83, 0xe3, 0x15, 0x5a, 0x7b, 0x1d, 0x81, 0xec, 0x7a, 0x40, 0xbc, 0x80, 0xf1,
	0xc0, 0x4c, 0xa9, 0x47, 0x18, 0x99, 0xf0, 0x1a, 0x00, 0x36, 0x75, 0x89, 0x17, 0x2e, 0x2a, 0x5b,
	0x9f, 0xa9, 0x94, 0x66, 0x59, 0x74, 0x3d, 0x8e, 0x42, 0x13, 0x0c, 0xf0, 0x25, 0x90, 0xda, 0x26,
	0xb4, 0xdd, 0x11, 0xea, 0x89, 0x25, 0x91, 0xb6, 0xe0, 0x06, 0x58, 0x68, 0x60, 0x21, 0x08, 0x1f,
	0x98, 0x69, 0xb5, 0xc8, 0x4c, 0x3d, 0xab, 0x86, 0x21, 0x28, 0x8a, 0x85, 0xef, 0x81, 0xe3, 0xcc,
	0x27, 0x1c, 0x0b, 0xea, 0xb5, 0xeb, 0x4d, 0xe6, 0xd9, 0x0a, 0x17, 0x98, 0x40, 0x71, 0xbe, 0x35,
	0x0b, 0xe7, 0xf5, 0x28, 0xfe, 0x52, 0x1c, 0x8e, 0x8e, 0xb1, 0x69, 0x27, 0x7c, 0x15, 0x2c, 0x50,
	0xbf, 0xde, 0x64, 0x36, 0x31, 0x33, 0x6a, 0x37, 0x81, 0xe1, 0x4e, 0x3e, 0x55, 0xdb, 0xbc, 0xc4,
	0x6c, 0x82, 0x52, 0xd4, 0x97, 0xbf, 0xf0, 0x75, 0x90, 0xed, 0x92, 0x41, 0xdd, 0xe7, 0xac, 0x4f,
	0x65, 0x07, 0xa8, 0xd7, 0x36, 0x0f, 0xab, 0x16, 0x1f, 0xed, 0x92, 0xc1, 0xe6, 0x84, 0x1b, 0x9e,
	0x06, 0x87, 0x25, 0x34, 0x20, 0xcd, 0x1e, 0xa7, 0x62, 0x60, 0x2e, 0x85, 0x7b, 0xac, 0x4b, 0x06,
	0xbf, 0xd3, 0x2e, 0x58, 0x05, 0x29, 0xbf, 0xc3, 0x04, 0x0b, 0xcc, 0x23, 0xaa, 0xa0, 0x9f, 0xcc,
	0x52, 0xd0, 0xa6, 0x8a, 0x40, 0x3a, 0x52, 0x72, 0xf4, 0xa9, 0x4d, 0x58, 0x60, 0x1e, 0x9d, 0x9d,
	0xe3, 0xa6, 0x8a, 0x40, 0x3a, 0x12, 0x96, 0x41, 0xc6, 0xe7, 0xcc, 0xee, 0x35, 0x45, 0xbd, 0xc7,
	0x1d, 0x33, 0xab, 0xca, 0x3f, 0x32, 0xdc, 0xc9, 0x83, 0xcd, 0xd0, 0xbd, 0x85, 0xae, 0x20, 0xa0,
	0x21, 0x5b, 0xdc, 0x81, 0x6f, 0x82, 0x25, 0x1b, 0x0b, 0x1c, 0x74, 0x08, 0x09, 0x43, 0x96, 0x55,
	0x48, 0x76, 0xb8, 0x93, 0x3f, 0xbc, 0x1e, 0x4d, 0xc8, 0xa0, 0xc3, 0x31, 0x4c, 0x86, 0xdd, 0x00,
	0x99, 0x26, 0x73, 0x7d, 0x87, 0x62, 0xaf, 0x49, 0x02, 0x13, 0xaa, 0x84, 0xcb, 0xb3, 0x24, 0x7c,
	0x69, 0x1c, 0x86, 0x26, 0x39, 0xe0, 0x59, 0xb0, 0x8c, 0xed, 0xf0, 0x11, 0x62, 0xa7, 0xce, 0xb1,
	0x4d, 0x59, 0x60, 0x1e, 0x53, 0x4f, 0x24, 0x3b, 0x9e, 0x40, 0xca, 0x9f, 0x7b, 0x17, 0x2c, 0xe8,
	0x33, 0x22, 0x8f, 0x88, 0x3e, 0x7b, 0xa1, 0x76, 0xa0, 0xc8, 0x94, 0x33, 0x5e, 0xcf, 0x25, 0x9c,
	0x36, 0x95, 0x62, 0x2c, 0xa1, 0xc8, 0x84, 0x79, 0x90, 0xf1, 0x31, 0x17, 0x93, 0xfa, 0x9a, 0x46,
	0x40, 0xba, 0x42, 0x49, 0xcd, 0x3d, 0x9e, 0x03, 0x47, 0x9f, 0x3a, 0x9d, 0xcf, 0xb5, 0xd0, 0xd9,
	0xfd, 0xb4, 0x67, 0x2e, 0x2c, 0x6a, 0x4a, 0x4e, 0xee, 0x80, 0x45, 0x9f, 0xb3, 0x16, 0x75, 0x48,
	0xa4, 0x4f, 0x17, 0x9f, 0x43, 0x45, 0x4a, 0x9b, 0x9a, 0x63, 0xc3, 0x13, 0x7c, 0x80, 0x62, 0xca,
	0xdc, 0x3f, 0x0c, 0xb0, 0xa0, 0xe7, 0xe0, 0x39, 0x00, 0xb4, 0x7f, 0xac, 0xb9, 0x4b, 0xc3, 0x9d,
	0x7c, 0x5a, 0x03, 0x6a, 0xeb, 0x28, 0xad, 0x01, 0x35, 0x1b, 0x5e, 0x04, 0xcb, 0x3a, 0x87, 0x7a,
	0x93, 0x70, 0xf5, 0xba, 0xb0, 0x55, 0xa5, 0x8b, 0xd5, 0xe3, 0xc3, 0x9d, 0x7c, 0xf6, 0x0a, 0x43,
	0xf8, 0x9d, 0x8b, 0xd7, 0x2e, 0x45, 0x73, 0x28, 0xab, 0xe1, 0xb1, 0x47, 0x4a, 0xbc, 0x3c, 0x90,
	0x4d, 0xb9, 0xdc, 0xdc, 0x58, 0xe2, 0xe5, 0x51, 0x6c, 0x4a, 0x89, 0x57, 0x93, 0x35, 0x3b, 0x77,
	0x1f, 0x2c, 0xed, 0xc9, 0x1f, 0x66, 0xc1, 0x5c, 0x97, 0x0c, 0x74, 0xc7, 0xe5, 0x10, 0xde, 0x00,
	0xf3, 0x7d, 0xec, 0xf4, 0xc2, 0xd7, 0x40, 0xa6, 0xf2, 0xab, 0x1f, 0xd0, 0x23, 0x14, 0x32, 0x9d,
	0x4f, 0xfe, 0xc2, 0xc8, 0x79, 0x00, 0x8c, 0xa5, 0x51, 0xbe, 0xd4, 0xb6, 0xa9, 0x2d, 0x3a, 0x6a,
	0xe1, 0x24, 0x0a, 0x0d, 0x29, 0x92, 0x9d, 0x50, 0x24, 0x93, 0xa1, 0x48, 0x86, 0x16, 0xcc, 0x81,
	0x45, 0x9b, 0x62, 0x97, 0x08, 0xbd, 0x99, 0x92, 0x28, 0xb6, 0x65, 0x8c, 0x43, 0xbc, 0xb6, 0xe8,
	0x98, 0x87, 0xc2, 0x98, 0xd0, 0xca, 0xdd, 0x06, 0x0b, 0x5a, 0x25, 0xe1, 0xaf, 0x41, 0x86, 0x13,
	0xdf, 0xc1, 0x4d, 0x82, 0x1b, 0x0e, 0x51, 0x4b, 0x66, 0x2a, 0xb9, 0x52, 0x78, 0xf7, 0x29, 0x45,
	0x77, 0x9f, 0x52, 0x95, 0x31, 0xe7, 0xa6, 0xcc, 0x17, 0x4d, 0xc2, 0xe5, 0x5b, 0x51, 0x0c, 0xfc,
	0xf8, 0xad, 0x28, 0xc7, 0xb9, 0xff, 0x24, 0xc1, 0xb1, 0x7d, 0xf4, 0x12, 0xde, 0x05, 0x19, 0x41,
	0x5c, 0x35, 0xd1, 0xe3, 0xd1, 0x4a, 0xbf, 0x79, 0x4e, 0xf5, 0x2d, 0x5d, 0xa1, 0x2e, 0x15, 0x01,
	0x9a, 0xa4, 0x84, 0x5d, 0xb0, 0xcc, 0x89, 0x83, 0x05, 0xed, 0x93, 0x7a, 0xa7, 0xe7, 0x52, 0x5b,
	0x2a, 0x66, 0xf2, 0x85, 0xac, 0x93, 0x8d, 0x88, 0x7f, 0xab, 0x79, 0x73, 0x2d, 0x90, 0x0a, 0xe7,
	0x60, 0x11, 0xcc, 0xb9, 0xd4, 0xd3, 0x05, 0x9d, 0x9c, 0x6a, 0xdd, 0x65, 0x87, 0x61, 0x11, 0xf6,
	0x4e, 0xe2, 0x14, 0x1c, 0xdf, 0xd7, 0x79, 0x7d, 0x0f, 0x1c, 0xdf, 0xcf, 0x55, 0x40, 0x2a, 0x14,
	0x6b, 0xd9, 0x6c, 0x17, 0xd3, 0x48, 0x01, 0xd4, 0x58, 0xee, 0x15, 0x26, 0x3a, 0x84, 0x9b, 0x49,
	0x75, 0xb0, 0x43, 0x43, 0xc6, 0x84, 0xe2, 0xfc, 0x0c, 0x31, 0xff, 0x4a, 0x82, 0xcc, 0x84, 0x40,
	0x42, 0x04, 0x52, 0x01, 0x6e, 0x11, 0x21, 0xf7, 0xbf, 0xd4, 0x83, 0xf3, 0xcf, 0xa8, 0xb0, 0x13,
	0x63, 0xa4, 0x99, 0x60, 0x13, 0x1c, 0x55, 0xe2, 0x5a, 0x27, 0xf7, 0x7a, 0xd4, 0x77, 0x89, 0x27,
	0x54, 0x0e, 0x3f, 0x8c, 0xfc, 0x88, 0xa2, 0xdc, 0x88, 0x18, 0x73, 0xef, 0x01, 0x30, 0x9e, 0x95,
	0x0d, 0x68, 0x30, 0x3b, 0x3a, 0xc4, 0x6a, 0xac, 0xee, 0x72, 0x8c, 0xbb, 0xf1, 0x5d, 0x8e, 0x71,
	0x57, 0x1e, 0xa3, 0x40, 0x60, 0xcf, 0xc6, 0x5c, 0x8b, 0x04, 0x8a, 0xed, 0x49, 0xf5, 0x3d, 0xb4,
	0x47, 0x7d, 0x0b, 0x7f, 0x4a, 0x82, 0xdc, 0x15, 0x1a, 0x88, 0xbd, 0xf7, 0xf7, 0x00, 0x91, 0x7b,
	0x3d, 0x12, 0x88, 0x17, 0x7d, 0x8f, 0xaf, 0x80, 0x79, 0x47, 0x6e, 0x39, 0xbd, 0x77, 0x4e, 0x4d,
	0xed, 0x9d, 0xad, 0x9a, 0x27, 0xd6, 0x2a, 0xe1, 0xe6, 0x09, 0xa1, 0xf0, 0x67, 0x20, 0xc5, 0x5a,
	0xad, 0x80, 0x08, 0x55, 0xd5, 0xf7, 0x05, 0x69, 0x2c, 0x7c, 0x0b, 0x2c, 0x32, 0x6e, 0x13, 0x5e,
	0x6f, 0x0c, 0xc2, 0x92, 0xab, 0xa7, 0x9e, 0x54, 0x5f, 0xe6, 0x27, 0x50, 0x02, 0xc5, 0x15, 0xa1,
	0x74, 0x31, 0x1e, 0x2e, 0x28, 0x74, 0x75, 0x50, 0xf8, 0x70, 0x0e, 0xe4, 0xf7, 0x34, 0x64, 0xfc,
	0xfc, 0xe2, 0xae, 0xbc, 0x36, 0xd5, 0x95, 0xcc, 0xbe, 0xe5, 0x4e, 0x5e, 0xcd, 0x93, 0xdf, 0x71,
	0x35, 0x7f, 0x09, 0xa4, 0x02, 0x82, 0x79, 0xb3, 0xa3, 0x1f, 0x9c, 0xb6, 0xe0, 0x95, 0xa9, 0x22,
	0x7e, 0xfa, 0xa4, 0x5a, 0xe2, 0xe7, 0x0e, 0x2a, 0x22, 0x5e, 0x0d, 0xa5, 0x8b, 0xf1, 0x30, 0xaa,
	0x6c, 0xdc, 0xfc, 0xf9, 0xe7, 0x69, 0x7e, 0xea, 0x19, 0x9a, 0x7f, 0x01, 0x80, 0xf1, 0xa7, 0xa6,
	0xbe, 0x5e, 0x4f, 0x2b, 0xf2, 0x65, 0x09, 0xb9, 0x8a, 0x83, 0x6e, 0xf5, 0xd0, 0xa3, 0x9d, 0xbc,
	0x81, 0xd2, 0xad, 0xc8, 0x51, 0xd8, 0x02, 0x27, 0xf7, 0xdd, 0x94, 0x81, 0xcf, 0xbc, 0x80, 0xc0,
	0x9f, 0x83, 0x94, 0xaa, 0x39, 0xd0, 0x27, 0xdb, 0x3a, 0xf0, 0xf0, 0xa9, 0x40, 0xa4, 0xd1, 0x05,
	0x0a, 0x56, 0x0e, 0x7e, 0xb4, 0x9a, 0x7b, 0x43, 0x7e, 0x12, 0xc5, 0x6e, 0xbd, 0xc0, 0xab, 0x33,
	0x9c, 0x6e, 0x34, 0x19, 0x57, 0xf9, 0x63, 0x0a, 0x64, 0x43, 0x04, 0x8a, 0xff, 0x56, 0x80, 0x7f,
	0x31, 0x00, 0x90, 0x09, 0x84, 0xe5, 0xc0, 0xa9, 0x3b, 0xea, 0xc1, 0x07, 0x31, 0x77, 0x76, 0x26,
	0x6c, 0x58, 0x43, 0xe1, 0xec, 0x87, 0x5f, 0xfc, 0xff, 0xaf, 0xc9, 0x1f, 0x43, 0x50, 0xb6, 0x79,
	0x39, 0xac, 0xfd, 0xd6, 0x09, 0xf8, 0xa3, 0xb1, 0x55, 0x7e, 0x10, 0xed, 0x99, 0x87, 0xf0, 0x7f,
	0x06, 0x38, 0x2a, 0xc9, 0x26, 0x9a, 0x01, 0xcb, 0xdf, 0xb9, 0xda, 0xf4, 0x89, 0xc8, 0xbd, 0x31,
	0x7b, 0x80, 0xce, 0xf1, 0xae, 0xca, 0xf1, 0x16, 0x3c, 0xbd, 0x6f, 0x56, 0xe5, 0x89, 0x5e, 0xde,
	0x7a, 0x13, 0xae, 0xed, 0x0f, 0x52, 0x7b, 0x3c, 0x28, 0x3f, 0x88, 0xf6, 0xfa, 0x9e, 0x30, 0xf8,
	0x6f, 0x03, 0x64, 0xde, 0x26, 0xe2, 0xf7, 0xc4, 0xf5, 0x1d, 0x2c, 0x08, 0x3c, 0xf8, 0xdb, 0x4b,
	0x5f, 0x6c, 0x26, 0x3e, 0xe7, 0x73, 0xa7, 0x0f, 0x04, 0x47, 0x7c, 0x85, 0x2d, 0x55, 0xc1, 0x75,
	0x78, 0x75, 0xd6, 0xe4, 0x1e, 0x3c, 0xfd, 0xbd, 0xfb, 0xb0, 0xfc, 0xa0, 0x11, 0xc1, 0x45, 0x94,
	0xe6, 0x7f, 0x0d, 0x70, 0xf2, 0x6d, 0x22, 0xae, 0x86, 0xff, 0xb1, 0x6c, 0xe2, 0x81, 0xc3, 0xb0,
	0x7d, 0x99, 0x71, 0x57, 0xdd, 0x77, 0x82, 0x67, 0x2b, 0x63, 0xf5, 0x69, 0xf0, 0x41, 0xb4, 0x85,
	0x77, 0x54, 0x35, 0x37, 0xe0, 0xf5, 0x17, 0x52, 0x4d, 0x2b, 0x26, 0xae, 0xfe, 0xd3, 0x78, 0xb4,
	0x6b, 0x19, 0x9f, 0xef, 0x5a, 0xc6, 0x97, 0xbb, 0x56, 0xe2, 0xab, 0x5d, 0x2b, 0xf1, 0xf5, 0xae,
	0x95, 0x78, 0xbc, 0x6b, 0x25, 0xbe, 0xd9, 0xb5, 0x8c, 0x0f, 0x86, 0x96, 0xf1, 0xd1, 0xd0, 0x4a,
	0x7c, 0x3c, 0xb4, 0x8c, 0x4f, 0x86, 0x56, 0xe2, 0xd3, 0xa1, 0x95, 0xf8, 0x6c, 0x68, 0x25, 0x1e,
	0x0d, 0x2d, 0xe3, 0xf3, 0xa1, 0x65, 0x7c, 0x39, 0xb4, 0x12, 0x5f, 0x0d, 0x2d, 0xe3, 0xeb, 0xa1,
	0x95, 0x78, 0x3c, 0xb4, 0x8c, 0x6f, 0x86, 0x56, 0xe2, 0x83, 0x91, 0x95, 0xf8, 0x68, 0x64, 0x19,
	0x7f, 0x1e, 0x59, 0x89, 0xbf, 0x8d, 0x2c, 0xe3, 0xef, 0x23, 0x2b, 0xf1, 0xf1, 0xc8, 0x4a, 0x7c,
	0x32, 0xb2, 0x8c, 0x4f, 0x47, 0x96, 0xf1, 0xd9, 0xc8, 0x32, 0x6e, 0x95, 0xdb, 0xac, 0x24, 0x3a,
	0x44, 0x74, 0xa8, 0xd7, 0x0e, 0x4a, 0x1e, 0x11, 0xdb, 0x8c, 0x77, 0xcb, 0x7b, 0xff, 0xcb, 0xea,
	0xaf, 0x95, 0xfd, 0x6e, 0xbb, 0x2c, 0x84, 0xe7, 0x37, 0x1a, 0x29, 0x25, 0x4c, 0x6b, 0xdf, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x9e, 0x17, 0x08, 0x40, 0x20, 0x14, 0x00, 0x00,
}

func (this *EndDeviceBrand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceBrand)
	if !ok {
		that2, ok := that.(EndDeviceBrand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BrandID != that1.BrandID {
		return false
	}
	if this.BrandName != that1.BrandName {
		return false
	}
	if this.PrivateEnterpriseNumber != that1.PrivateEnterpriseNumber {
		return false
	}
	if len(this.OrganizationUniqueIdentifiers) != len(that1.OrganizationUniqueIdentifiers) {
		return false
	}
	for i := range this.OrganizationUniqueIdentifiers {
		if this.OrganizationUniqueIdentifiers[i] != that1.OrganizationUniqueIdentifiers[i] {
			return false
		}
	}
	if this.VendorId != that1.VendorId {
		return false
	}
	if this.Website != that1.Website {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Logo != that1.Logo {
		return false
	}
	return true
}
func (this *EndDeviceDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceDefinition)
	if !ok {
		that2, ok := that.(EndDeviceDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ModelID != that1.ModelID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.HardwareVersions) != len(that1.HardwareVersions) {
		return false
	}
	for i := range this.HardwareVersions {
		if !this.HardwareVersions[i].Equal(that1.HardwareVersions[i]) {
			return false
		}
	}
	if len(this.FirmwareVersions) != len(that1.FirmwareVersions) {
		return false
	}
	for i := range this.FirmwareVersions {
		if !this.FirmwareVersions[i].Equal(that1.FirmwareVersions[i]) {
			return false
		}
	}
	if len(this.Sensors) != len(that1.Sensors) {
		return false
	}
	for i := range this.Sensors {
		if this.Sensors[i] != that1.Sensors[i] {
			return false
		}
	}
	if !this.Dimensions.Equal(that1.Dimensions) {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	if !this.Battery.Equal(that1.Battery) {
		return false
	}
	if !this.OperatingConditions.Equal(that1.OperatingConditions) {
		return false
	}
	if this.IPCode != that1.IPCode {
		return false
	}
	if len(this.KeyProvisioning) != len(that1.KeyProvisioning) {
		return false
	}
	for i := range this.KeyProvisioning {
		if this.KeyProvisioning[i] != that1.KeyProvisioning[i] {
			return false
		}
	}
	if this.KeySecurity != that1.KeySecurity {
		return false
	}
	if !this.Photos.Equal(that1.Photos) {
		return false
	}
	if !this.Videos.Equal(that1.Videos) {
		return false
	}
	if this.ProductURL != that1.ProductURL {
		return false
	}
	if this.DatasheetURL != that1.DatasheetURL {
		return false
	}
	if !this.Compliances.Equal(that1.Compliances) {
		return false
	}
	if len(this.AdditionalRadios) != len(that1.AdditionalRadios) {
		return false
	}
	for i := range this.AdditionalRadios {
		if this.AdditionalRadios[i] != that1.AdditionalRadios[i] {
			return false
		}
	}
	return true
}
func (this *EndDeviceDefinition_Version) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceDefinition_Version)
	if !ok {
		that2, ok := that.(EndDeviceDefinition_Version)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Numeric != that1.Numeric {
		return false
	}
	if this.PartNumber != that1.PartNumber {
		return false
	}
	return true
}
func (this *EndDeviceDefinition_FirmwareVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceDefinition_FirmwareVersion)
	if !ok {
		that2, ok := that.(EndDeviceDefinition_FirmwareVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Numeric != that1.Numeric {
		return false
	}
	if len(this.HardwareVersions) != len(that1.HardwareVersions) {
		return false
	}
	for i := range this.HardwareVersions {
		if this.HardwareVersions[i] != that1.HardwareVersions[i] {
			return false
		}
	}
	if len(this.Profiles) != len(that1.Profiles) {
		return false
	}
	for i := range this.Profiles {
		if !this.Profiles[i].Equal(that1.Profiles[i]) {
			return false
		}
	}
	return true
}
func (this *EndDeviceDefinition_FirmwareVersion_Profile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceDefinition_FirmwareVersion_Profile)
	if !ok {
		that2, ok := that.(EndDeviceDefinition_FirmwareVersion_Profile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProfileID != that1.ProfileID {
		return false
	}
	if this.LoRaWANCertified != that1.LoRaWANCertified {
		return false
	}
	if this.CodecID != that1.CodecID {
		return false
	}
	return true
}
func (this *EndDeviceDefinition_Dimensions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceDefinition_Dimensions)
	if !ok {
		that2, ok := that.(EndDeviceDefinition_Dimensions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.Diameter != that1.Diameter {
		return false
	}
	if this.Length != that1.Length {
		return false
	}
	return true
}
func (this *EndDeviceDefinition_Battery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceDefinition_Battery)
	if !ok {
		that2, ok := that.(EndDeviceDefinition_Battery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Replaceable.Equal(that1.Replaceable) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *EndDeviceDefinition_OperatingConditions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceDefinition_OperatingConditions)
	if !ok {
		that2, ok := that.(EndDeviceDefinition_OperatingConditions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Temperature.Equal(that1.Temperature) {
		return false
	}
	if !this.RelativeHumidity.Equal(that1.RelativeHumidity) {
		return false
	}
	return true
}
func (this *EndDeviceDefinition_OperatingConditions_Limits) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceDefinition_OperatingConditions_Limits)
	if !ok {
		that2, ok := that.(EndDeviceDefinition_OperatingConditions_Limits)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Min.Equal(that1.Min) {
		return false
	}
	if !this.Max.Equal(that1.Max) {
		return false
	}
	return true
}
func (this *EndDeviceDefinition_Photos) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceDefinition_Photos)
	if !ok {
		that2, ok := that.(EndDeviceDefinition_Photos)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Main != that1.Main {
		return false
	}
	if len(this.Other) != len(that1.Other) {
		return false
	}
	for i := range this.Other {
		if this.Other[i] != that1.Other[i] {
			return false
		}
	}
	return true
}
func (this *EndDeviceDefinition_Videos) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceDefinition_Videos)
	if !ok {
		that2, ok := that.(EndDeviceDefinition_Videos)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Main != that1.Main {
		return false
	}
	if len(this.Other) != len(that1.Other) {
		return false
	}
	for i := range this.Other {
		if this.Other[i] != that1.Other[i] {
			return false
		}
	}
	return true
}
func (this *EndDeviceDefinition_Compliances) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceDefinition_Compliances)
	if !ok {
		that2, ok := that.(EndDeviceDefinition_Compliances)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Safety) != len(that1.Safety) {
		return false
	}
	for i := range this.Safety {
		if !this.Safety[i].Equal(that1.Safety[i]) {
			return false
		}
	}
	if len(this.RadioEquipment) != len(that1.RadioEquipment) {
		return false
	}
	for i := range this.RadioEquipment {
		if !this.RadioEquipment[i].Equal(that1.RadioEquipment[i]) {
			return false
		}
	}
	return true
}
func (this *EndDeviceDefinition_Compliances_Compliance) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceDefinition_Compliances_Compliance)
	if !ok {
		that2, ok := that.(EndDeviceDefinition_Compliances_Compliance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	if this.Norm != that1.Norm {
		return false
	}
	if this.Standard != that1.Standard {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *ListEndDeviceBrandsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListEndDeviceBrandsRequest)
	if !ok {
		that2, ok := that.(ListEndDeviceBrandsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BrandID != that1.BrandID {
		return false
	}
	if !this.Limit.Equal(that1.Limit) {
		return false
	}
	if !this.Offset.Equal(that1.Offset) {
		return false
	}
	if this.OrderBy != that1.OrderBy {
		return false
	}
	return true
}
func (this *ListEndDeviceDefinitionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListEndDeviceDefinitionsRequest)
	if !ok {
		that2, ok := that.(ListEndDeviceDefinitionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BrandID != that1.BrandID {
		return false
	}
	if this.ModelID != that1.ModelID {
		return false
	}
	if this.Search != that1.Search {
		return false
	}
	if this.OrderBy != that1.OrderBy {
		return false
	}
	if !this.Limit.Equal(that1.Limit) {
		return false
	}
	if !this.Offset.Equal(that1.Offset) {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	return true
}
func (this *ListEndDeviceBrandsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListEndDeviceBrandsResponse)
	if !ok {
		that2, ok := that.(ListEndDeviceBrandsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Brands) != len(that1.Brands) {
		return false
	}
	for i := range this.Brands {
		if !this.Brands[i].Equal(that1.Brands[i]) {
			return false
		}
	}
	return true
}
func (this *ListEndDeviceDefinitionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListEndDeviceDefinitionsResponse)
	if !ok {
		that2, ok := that.(ListEndDeviceDefinitionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Definitions) != len(that1.Definitions) {
		return false
	}
	for i := range this.Definitions {
		if !this.Definitions[i].Equal(that1.Definitions[i]) {
			return false
		}
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceRepositoryClient is the client API for DeviceRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceRepositoryClient interface {
	ListBrands(ctx context.Context, in *ListEndDeviceBrandsRequest, opts ...grpc.CallOption) (*ListEndDeviceBrandsResponse, error)
	ListDefinitions(ctx context.Context, in *ListEndDeviceDefinitionsRequest, opts ...grpc.CallOption) (*ListEndDeviceDefinitionsResponse, error)
	GetTemplate(ctx context.Context, in *EndDeviceVersionIdentifiers, opts ...grpc.CallOption) (*EndDeviceTemplate, error)
	GetMessagePayloadFormatters(ctx context.Context, in *EndDeviceVersionIdentifiers, opts ...grpc.CallOption) (*MessagePayloadFormatters, error)
}

type deviceRepositoryClient struct {
	cc *grpc.ClientConn
}

func NewDeviceRepositoryClient(cc *grpc.ClientConn) DeviceRepositoryClient {
	return &deviceRepositoryClient{cc}
}

func (c *deviceRepositoryClient) ListBrands(ctx context.Context, in *ListEndDeviceBrandsRequest, opts ...grpc.CallOption) (*ListEndDeviceBrandsResponse, error) {
	out := new(ListEndDeviceBrandsResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.DeviceRepository/ListBrands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRepositoryClient) ListDefinitions(ctx context.Context, in *ListEndDeviceDefinitionsRequest, opts ...grpc.CallOption) (*ListEndDeviceDefinitionsResponse, error) {
	out := new(ListEndDeviceDefinitionsResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.DeviceRepository/ListDefinitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRepositoryClient) GetTemplate(ctx context.Context, in *EndDeviceVersionIdentifiers, opts ...grpc.CallOption) (*EndDeviceTemplate, error) {
	out := new(EndDeviceTemplate)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.DeviceRepository/GetTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRepositoryClient) GetMessagePayloadFormatters(ctx context.Context, in *EndDeviceVersionIdentifiers, opts ...grpc.CallOption) (*MessagePayloadFormatters, error) {
	out := new(MessagePayloadFormatters)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.DeviceRepository/GetMessagePayloadFormatters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceRepositoryServer is the server API for DeviceRepository service.
type DeviceRepositoryServer interface {
	ListBrands(context.Context, *ListEndDeviceBrandsRequest) (*ListEndDeviceBrandsResponse, error)
	ListDefinitions(context.Context, *ListEndDeviceDefinitionsRequest) (*ListEndDeviceDefinitionsResponse, error)
	GetTemplate(context.Context, *EndDeviceVersionIdentifiers) (*EndDeviceTemplate, error)
	GetMessagePayloadFormatters(context.Context, *EndDeviceVersionIdentifiers) (*MessagePayloadFormatters, error)
}

// UnimplementedDeviceRepositoryServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceRepositoryServer struct {
}

func (*UnimplementedDeviceRepositoryServer) ListBrands(ctx context.Context, req *ListEndDeviceBrandsRequest) (*ListEndDeviceBrandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBrands not implemented")
}
func (*UnimplementedDeviceRepositoryServer) ListDefinitions(ctx context.Context, req *ListEndDeviceDefinitionsRequest) (*ListEndDeviceDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDefinitions not implemented")
}
func (*UnimplementedDeviceRepositoryServer) GetTemplate(ctx context.Context, req *EndDeviceVersionIdentifiers) (*EndDeviceTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (*UnimplementedDeviceRepositoryServer) GetMessagePayloadFormatters(ctx context.Context, req *EndDeviceVersionIdentifiers) (*MessagePayloadFormatters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagePayloadFormatters not implemented")
}

func RegisterDeviceRepositoryServer(s *grpc.Server, srv DeviceRepositoryServer) {
	s.RegisterService(&_DeviceRepository_serviceDesc, srv)
}

func _DeviceRepository_ListBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEndDeviceBrandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRepositoryServer).ListBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.DeviceRepository/ListBrands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRepositoryServer).ListBrands(ctx, req.(*ListEndDeviceBrandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRepository_ListDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEndDeviceDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRepositoryServer).ListDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.DeviceRepository/ListDefinitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRepositoryServer).ListDefinitions(ctx, req.(*ListEndDeviceDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRepository_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceVersionIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRepositoryServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.DeviceRepository/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRepositoryServer).GetTemplate(ctx, req.(*EndDeviceVersionIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRepository_GetMessagePayloadFormatters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceVersionIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRepositoryServer).GetMessagePayloadFormatters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.DeviceRepository/GetMessagePayloadFormatters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRepositoryServer).GetMessagePayloadFormatters(ctx, req.(*EndDeviceVersionIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceRepository_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.DeviceRepository",
	HandlerType: (*DeviceRepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBrands",
			Handler:    _DeviceRepository_ListBrands_Handler,
		},
		{
			MethodName: "ListDefinitions",
			Handler:    _DeviceRepository_ListDefinitions_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _DeviceRepository_GetTemplate_Handler,
		},
		{
			MethodName: "GetMessagePayloadFormatters",
			Handler:    _DeviceRepository_GetMessagePayloadFormatters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/devicerepository.proto",
}

func (m *EndDeviceBrand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceBrand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceBrand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x32
	}
	if m.VendorId != 0 {
		i = encodeVarintDevicerepository(dAtA, i, uint64(m.VendorId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OrganizationUniqueIdentifiers) > 0 {
		for iNdEx := len(m.OrganizationUniqueIdentifiers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrganizationUniqueIdentifiers[iNdEx])
			copy(dAtA[i:], m.OrganizationUniqueIdentifiers[iNdEx])
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.OrganizationUniqueIdentifiers[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.PrivateEnterpriseNumber != 0 {
		i = encodeVarintDevicerepository(dAtA, i, uint64(m.PrivateEnterpriseNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BrandName) > 0 {
		i -= len(m.BrandName)
		copy(dAtA[i:], m.BrandName)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.BrandName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BrandID) > 0 {
		i -= len(m.BrandID)
		copy(dAtA[i:], m.BrandID)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.BrandID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceDefinition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdditionalRadios) > 0 {
		for iNdEx := len(m.AdditionalRadios) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AdditionalRadios[iNdEx])
			copy(dAtA[i:], m.AdditionalRadios[iNdEx])
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.AdditionalRadios[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.Compliances != nil {
		{
			size, err := m.Compliances.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.DatasheetURL) > 0 {
		i -= len(m.DatasheetURL)
		copy(dAtA[i:], m.DatasheetURL)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.DatasheetURL)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ProductURL) > 0 {
		i -= len(m.ProductURL)
		copy(dAtA[i:], m.ProductURL)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.ProductURL)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Videos != nil {
		{
			size, err := m.Videos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Photos != nil {
		{
			size, err := m.Photos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.KeySecurity) > 0 {
		i -= len(m.KeySecurity)
		copy(dAtA[i:], m.KeySecurity)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.KeySecurity)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.KeyProvisioning) > 0 {
		for iNdEx := len(m.KeyProvisioning) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.KeyProvisioning[iNdEx])
			copy(dAtA[i:], m.KeyProvisioning[iNdEx])
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.KeyProvisioning[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.IPCode) > 0 {
		i -= len(m.IPCode)
		copy(dAtA[i:], m.IPCode)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.IPCode)))
		i--
		dAtA[i] = 0x5a
	}
	if m.OperatingConditions != nil {
		{
			size, err := m.OperatingConditions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Battery != nil {
		{
			size, err := m.Battery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Weight != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(float32(m.Weight)))
		i--
		dAtA[i] = 0x45
	}
	if m.Dimensions != nil {
		{
			size, err := m.Dimensions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Sensors) > 0 {
		for iNdEx := len(m.Sensors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Sensors[iNdEx])
			copy(dAtA[i:], m.Sensors[iNdEx])
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Sensors[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.FirmwareVersions) > 0 {
		for iNdEx := len(m.FirmwareVersions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FirmwareVersions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevicerepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.HardwareVersions) > 0 {
		for iNdEx := len(m.HardwareVersions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HardwareVersions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevicerepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModelID) > 0 {
		i -= len(m.ModelID)
		copy(dAtA[i:], m.ModelID)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.ModelID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceDefinition_Version) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceDefinition_Version) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceDefinition_Version) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PartNumber) > 0 {
		i -= len(m.PartNumber)
		copy(dAtA[i:], m.PartNumber)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.PartNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Numeric != 0 {
		i = encodeVarintDevicerepository(dAtA, i, uint64(m.Numeric))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceDefinition_FirmwareVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceDefinition_FirmwareVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceDefinition_FirmwareVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Profiles) > 0 {
		for k := range m.Profiles {
			v := m.Profiles[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDevicerepository(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDevicerepository(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.HardwareVersions) > 0 {
		for iNdEx := len(m.HardwareVersions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.HardwareVersions[iNdEx])
			copy(dAtA[i:], m.HardwareVersions[iNdEx])
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.HardwareVersions[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Numeric != 0 {
		i = encodeVarintDevicerepository(dAtA, i, uint64(m.Numeric))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceDefinition_FirmwareVersion_Profile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceDefinition_FirmwareVersion_Profile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceDefinition_FirmwareVersion_Profile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CodecID) > 0 {
		i -= len(m.CodecID)
		copy(dAtA[i:], m.CodecID)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.CodecID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LoRaWANCertified {
		i--
		if m.LoRaWANCertified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ProfileID) > 0 {
		i -= len(m.ProfileID)
		copy(dAtA[i:], m.ProfileID)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.ProfileID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceDefinition_Dimensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceDefinition_Dimensions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceDefinition_Dimensions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Length != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(float32(m.Length)))
		i--
		dAtA[i] = 0x25
	}
	if m.Diameter != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(float32(m.Diameter)))
		i--
		dAtA[i] = 0x1d
	}
	if m.Height != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(float32(m.Height)))
		i--
		dAtA[i] = 0x15
	}
	if m.Width != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], math.Float32bits(float32(m.Width)))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceDefinition_Battery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceDefinition_Battery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceDefinition_Battery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if m.Replaceable != nil {
		{
			size, err := m.Replaceable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceDefinition_OperatingConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceDefinition_OperatingConditions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceDefinition_OperatingConditions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RelativeHumidity != nil {
		{
			size, err := m.RelativeHumidity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Temperature != nil {
		{
			size, err := m.Temperature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceDefinition_OperatingConditions_Limits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceDefinition_OperatingConditions_Limits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceDefinition_OperatingConditions_Limits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Max != nil {
		{
			size, err := m.Max.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Min != nil {
		{
			size, err := m.Min.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceDefinition_Photos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceDefinition_Photos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceDefinition_Photos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Other) > 0 {
		for iNdEx := len(m.Other) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Other[iNdEx])
			copy(dAtA[i:], m.Other[iNdEx])
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Other[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Main) > 0 {
		i -= len(m.Main)
		copy(dAtA[i:], m.Main)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Main)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceDefinition_Videos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceDefinition_Videos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceDefinition_Videos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Other) > 0 {
		for iNdEx := len(m.Other) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Other[iNdEx])
			copy(dAtA[i:], m.Other[iNdEx])
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Other[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Main) > 0 {
		i -= len(m.Main)
		copy(dAtA[i:], m.Main)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Main)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceDefinition_Compliances) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceDefinition_Compliances) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceDefinition_Compliances) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RadioEquipment) > 0 {
		for iNdEx := len(m.RadioEquipment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RadioEquipment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevicerepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Safety) > 0 {
		for iNdEx := len(m.Safety) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Safety[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevicerepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceDefinition_Compliances_Compliance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceDefinition_Compliances_Compliance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceDefinition_Compliances_Compliance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Standard) > 0 {
		i -= len(m.Standard)
		copy(dAtA[i:], m.Standard)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Standard)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Norm) > 0 {
		i -= len(m.Norm)
		copy(dAtA[i:], m.Norm)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Norm)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListEndDeviceBrandsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEndDeviceBrandsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListEndDeviceBrandsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderBy) > 0 {
		i -= len(m.OrderBy)
		copy(dAtA[i:], m.OrderBy)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.OrderBy)))
		i--
		dAtA[i] = 0x22
	}
	if m.Offset != nil {
		{
			size, err := m.Offset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != nil {
		{
			size, err := m.Limit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BrandID) > 0 {
		i -= len(m.BrandID)
		copy(dAtA[i:], m.BrandID)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.BrandID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListEndDeviceDefinitionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEndDeviceDefinitionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListEndDeviceDefinitionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FieldMask != nil {
		{
			size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Offset != nil {
		{
			size, err := m.Offset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Limit != nil {
		{
			size, err := m.Limit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OrderBy) > 0 {
		i -= len(m.OrderBy)
		copy(dAtA[i:], m.OrderBy)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.OrderBy)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Search) > 0 {
		i -= len(m.Search)
		copy(dAtA[i:], m.Search)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Search)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ModelID) > 0 {
		i -= len(m.ModelID)
		copy(dAtA[i:], m.ModelID)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.ModelID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BrandID) > 0 {
		i -= len(m.BrandID)
		copy(dAtA[i:], m.BrandID)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.BrandID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListEndDeviceBrandsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEndDeviceBrandsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListEndDeviceBrandsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Brands) > 0 {
		for iNdEx := len(m.Brands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Brands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevicerepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListEndDeviceDefinitionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEndDeviceDefinitionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListEndDeviceDefinitionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Definitions) > 0 {
		for iNdEx := len(m.Definitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Definitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevicerepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDevicerepository(dAtA []byte, offset int, v uint64) int {
	offset -= sovDevicerepository(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedEndDeviceBrand(r randyDevicerepository, easy bool) *EndDeviceBrand {
	this := &EndDeviceBrand{}
	this.BrandID = randStringDevicerepository(r)
	this.BrandName = randStringDevicerepository(r)
	this.PrivateEnterpriseNumber = r.Uint32()
	v1 := r.Intn(10)
	this.OrganizationUniqueIdentifiers = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.OrganizationUniqueIdentifiers[i] = randStringDevicerepository(r)
	}
	this.VendorId = r.Uint32()
	this.Website = randStringDevicerepository(r)
	this.Email = randStringDevicerepository(r)
	this.Logo = randStringDevicerepository(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceDefinition(r randyDevicerepository, easy bool) *EndDeviceDefinition {
	this := &EndDeviceDefinition{}
	this.ModelID = randStringDevicerepository(r)
	this.Name = randStringDevicerepository(r)
	this.Description = randStringDevicerepository(r)
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.HardwareVersions = make([]*EndDeviceDefinition_Version, v2)
		for i := 0; i < v2; i++ {
			this.HardwareVersions[i] = NewPopulatedEndDeviceDefinition_Version(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v3 := r.Intn(5)
		this.FirmwareVersions = make([]*EndDeviceDefinition_FirmwareVersion, v3)
		for i := 0; i < v3; i++ {
			this.FirmwareVersions[i] = NewPopulatedEndDeviceDefinition_FirmwareVersion(r, easy)
		}
	}
	v4 := r.Intn(10)
	this.Sensors = make([]string, v4)
	for i := 0; i < v4; i++ {
		this.Sensors[i] = randStringDevicerepository(r)
	}
	if r.Intn(5) != 0 {
		this.Dimensions = NewPopulatedEndDeviceDefinition_Dimensions(r, easy)
	}
	this.Weight = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Weight *= -1
	}
	if r.Intn(5) != 0 {
		this.Battery = NewPopulatedEndDeviceDefinition_Battery(r, easy)
	}
	if r.Intn(5) != 0 {
		this.OperatingConditions = NewPopulatedEndDeviceDefinition_OperatingConditions(r, easy)
	}
	this.IPCode = randStringDevicerepository(r)
	v5 := r.Intn(10)
	this.KeyProvisioning = make([]string, v5)
	for i := 0; i < v5; i++ {
		this.KeyProvisioning[i] = randStringDevicerepository(r)
	}
	this.KeySecurity = randStringDevicerepository(r)
	if r.Intn(5) != 0 {
		this.Photos = NewPopulatedEndDeviceDefinition_Photos(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Videos = NewPopulatedEndDeviceDefinition_Videos(r, easy)
	}
	this.ProductURL = randStringDevicerepository(r)
	this.DatasheetURL = randStringDevicerepository(r)
	if r.Intn(5) != 0 {
		this.Compliances = NewPopulatedEndDeviceDefinition_Compliances(r, easy)
	}
	v6 := r.Intn(10)
	this.AdditionalRadios = make([]string, v6)
	for i := 0; i < v6; i++ {
		this.AdditionalRadios[i] = randStringDevicerepository(r)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceDefinition_Version(r randyDevicerepository, easy bool) *EndDeviceDefinition_Version {
	this := &EndDeviceDefinition_Version{}
	this.Version = randStringDevicerepository(r)
	this.Numeric = r.Uint32()
	this.PartNumber = randStringDevicerepository(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceDefinition_FirmwareVersion(r randyDevicerepository, easy bool) *EndDeviceDefinition_FirmwareVersion {
	this := &EndDeviceDefinition_FirmwareVersion{}
	this.Version = randStringDevicerepository(r)
	this.Numeric = r.Uint32()
	v7 := r.Intn(10)
	this.HardwareVersions = make([]string, v7)
	for i := 0; i < v7; i++ {
		this.HardwareVersions[i] = randStringDevicerepository(r)
	}
	if r.Intn(5) != 0 {
		v8 := r.Intn(10)
		this.Profiles = make(map[string]*EndDeviceDefinition_FirmwareVersion_Profile)
		for i := 0; i < v8; i++ {
			this.Profiles[randStringDevicerepository(r)] = NewPopulatedEndDeviceDefinition_FirmwareVersion_Profile(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceDefinition_FirmwareVersion_Profile(r randyDevicerepository, easy bool) *EndDeviceDefinition_FirmwareVersion_Profile {
	this := &EndDeviceDefinition_FirmwareVersion_Profile{}
	this.ProfileID = randStringDevicerepository(r)
	this.LoRaWANCertified = bool(r.Intn(2) == 0)
	this.CodecID = randStringDevicerepository(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceDefinition_Dimensions(r randyDevicerepository, easy bool) *EndDeviceDefinition_Dimensions {
	this := &EndDeviceDefinition_Dimensions{}
	this.Width = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Width *= -1
	}
	this.Height = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Height *= -1
	}
	this.Diameter = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Diameter *= -1
	}
	this.Length = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Length *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceDefinition_Battery(r randyDevicerepository, easy bool) *EndDeviceDefinition_Battery {
	this := &EndDeviceDefinition_Battery{}
	if r.Intn(5) != 0 {
		this.Replaceable = types.NewPopulatedBoolValue(r, easy)
	}
	this.Type = randStringDevicerepository(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceDefinition_OperatingConditions(r randyDevicerepository, easy bool) *EndDeviceDefinition_OperatingConditions {
	this := &EndDeviceDefinition_OperatingConditions{}
	if r.Intn(5) != 0 {
		this.Temperature = NewPopulatedEndDeviceDefinition_OperatingConditions_Limits(r, easy)
	}
	if r.Intn(5) != 0 {
		this.RelativeHumidity = NewPopulatedEndDeviceDefinition_OperatingConditions_Limits(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceDefinition_OperatingConditions_Limits(r randyDevicerepository, easy bool) *EndDeviceDefinition_OperatingConditions_Limits {
	this := &EndDeviceDefinition_OperatingConditions_Limits{}
	if r.Intn(5) != 0 {
		this.Min = types.NewPopulatedFloatValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Max = types.NewPopulatedFloatValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceDefinition_Photos(r randyDevicerepository, easy bool) *EndDeviceDefinition_Photos {
	this := &EndDeviceDefinition_Photos{}
	this.Main = randStringDevicerepository(r)
	v9 := r.Intn(10)
	this.Other = make([]string, v9)
	for i := 0; i < v9; i++ {
		this.Other[i] = randStringDevicerepository(r)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceDefinition_Videos(r randyDevicerepository, easy bool) *EndDeviceDefinition_Videos {
	this := &EndDeviceDefinition_Videos{}
	this.Main = randStringDevicerepository(r)
	v10 := r.Intn(10)
	this.Other = make([]string, v10)
	for i := 0; i < v10; i++ {
		this.Other[i] = randStringDevicerepository(r)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceDefinition_Compliances(r randyDevicerepository, easy bool) *EndDeviceDefinition_Compliances {
	this := &EndDeviceDefinition_Compliances{}
	if r.Intn(5) != 0 {
		v11 := r.Intn(5)
		this.Safety = make([]*EndDeviceDefinition_Compliances_Compliance, v11)
		for i := 0; i < v11; i++ {
			this.Safety[i] = NewPopulatedEndDeviceDefinition_Compliances_Compliance(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v12 := r.Intn(5)
		this.RadioEquipment = make([]*EndDeviceDefinition_Compliances_Compliance, v12)
		for i := 0; i < v12; i++ {
			this.RadioEquipment[i] = NewPopulatedEndDeviceDefinition_Compliances_Compliance(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceDefinition_Compliances_Compliance(r randyDevicerepository, easy bool) *EndDeviceDefinition_Compliances_Compliance {
	this := &EndDeviceDefinition_Compliances_Compliance{}
	this.Body = randStringDevicerepository(r)
	this.Norm = randStringDevicerepository(r)
	this.Standard = randStringDevicerepository(r)
	this.Version = randStringDevicerepository(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListEndDeviceBrandsRequest(r randyDevicerepository, easy bool) *ListEndDeviceBrandsRequest {
	this := &ListEndDeviceBrandsRequest{}
	this.BrandID = randStringDevicerepository(r)
	if r.Intn(5) != 0 {
		this.Limit = types.NewPopulatedUInt32Value(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Offset = types.NewPopulatedUInt32Value(r, easy)
	}
	this.OrderBy = randStringDevicerepository(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListEndDeviceDefinitionsRequest(r randyDevicerepository, easy bool) *ListEndDeviceDefinitionsRequest {
	this := &ListEndDeviceDefinitionsRequest{}
	this.BrandID = randStringDevicerepository(r)
	this.ModelID = randStringDevicerepository(r)
	this.Search = randStringDevicerepository(r)
	this.OrderBy = randStringDevicerepository(r)
	if r.Intn(5) != 0 {
		this.Limit = types.NewPopulatedUInt32Value(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Offset = types.NewPopulatedUInt32Value(r, easy)
	}
	if r.Intn(5) != 0 {
		this.FieldMask = types.NewPopulatedFieldMask(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListEndDeviceBrandsResponse(r randyDevicerepository, easy bool) *ListEndDeviceBrandsResponse {
	this := &ListEndDeviceBrandsResponse{}
	if r.Intn(5) != 0 {
		v13 := r.Intn(5)
		this.Brands = make([]*EndDeviceBrand, v13)
		for i := 0; i < v13; i++ {
			this.Brands[i] = NewPopulatedEndDeviceBrand(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListEndDeviceDefinitionsResponse(r randyDevicerepository, easy bool) *ListEndDeviceDefinitionsResponse {
	this := &ListEndDeviceDefinitionsResponse{}
	if r.Intn(5) != 0 {
		v14 := r.Intn(5)
		this.Definitions = make([]*EndDeviceDefinition, v14)
		for i := 0; i < v14; i++ {
			this.Definitions[i] = NewPopulatedEndDeviceDefinition(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyDevicerepository interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneDevicerepository(r randyDevicerepository) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringDevicerepository(r randyDevicerepository) string {
	v15 := r.Intn(100)
	tmps := make([]rune, v15)
	for i := 0; i < v15; i++ {
		tmps[i] = randUTF8RuneDevicerepository(r)
	}
	return string(tmps)
}
func randUnrecognizedDevicerepository(r randyDevicerepository, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldDevicerepository(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldDevicerepository(dAtA []byte, r randyDevicerepository, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateDevicerepository(dAtA, uint64(key))
		v16 := r.Int63()
		if r.Intn(2) == 0 {
			v16 *= -1
		}
		dAtA = encodeVarintPopulateDevicerepository(dAtA, uint64(v16))
	case 1:
		dAtA = encodeVarintPopulateDevicerepository(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateDevicerepository(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateDevicerepository(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateDevicerepository(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateDevicerepository(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *EndDeviceBrand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BrandID)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.BrandName)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.PrivateEnterpriseNumber != 0 {
		n += 1 + sovDevicerepository(uint64(m.PrivateEnterpriseNumber))
	}
	if len(m.OrganizationUniqueIdentifiers) > 0 {
		for _, s := range m.OrganizationUniqueIdentifiers {
			l = len(s)
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	if m.VendorId != 0 {
		n += 1 + sovDevicerepository(uint64(m.VendorId))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *EndDeviceDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModelID)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if len(m.HardwareVersions) > 0 {
		for _, e := range m.HardwareVersions {
			l = e.Size()
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	if len(m.FirmwareVersions) > 0 {
		for _, e := range m.FirmwareVersions {
			l = e.Size()
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	if len(m.Sensors) > 0 {
		for _, s := range m.Sensors {
			l = len(s)
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	if m.Dimensions != nil {
		l = m.Dimensions.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Weight != 0 {
		n += 5
	}
	if m.Battery != nil {
		l = m.Battery.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.OperatingConditions != nil {
		l = m.OperatingConditions.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.IPCode)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if len(m.KeyProvisioning) > 0 {
		for _, s := range m.KeyProvisioning {
			l = len(s)
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	l = len(m.KeySecurity)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Photos != nil {
		l = m.Photos.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Videos != nil {
		l = m.Videos.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.ProductURL)
	if l > 0 {
		n += 2 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.DatasheetURL)
	if l > 0 {
		n += 2 + l + sovDevicerepository(uint64(l))
	}
	if m.Compliances != nil {
		l = m.Compliances.Size()
		n += 2 + l + sovDevicerepository(uint64(l))
	}
	if len(m.AdditionalRadios) > 0 {
		for _, s := range m.AdditionalRadios {
			l = len(s)
			n += 2 + l + sovDevicerepository(uint64(l))
		}
	}
	return n
}

func (m *EndDeviceDefinition_Version) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Numeric != 0 {
		n += 1 + sovDevicerepository(uint64(m.Numeric))
	}
	l = len(m.PartNumber)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *EndDeviceDefinition_FirmwareVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Numeric != 0 {
		n += 1 + sovDevicerepository(uint64(m.Numeric))
	}
	if len(m.HardwareVersions) > 0 {
		for _, s := range m.HardwareVersions {
			l = len(s)
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	if len(m.Profiles) > 0 {
		for k, v := range m.Profiles {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDevicerepository(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDevicerepository(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDevicerepository(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *EndDeviceDefinition_FirmwareVersion_Profile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProfileID)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.LoRaWANCertified {
		n += 2
	}
	l = len(m.CodecID)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *EndDeviceDefinition_Dimensions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Width != 0 {
		n += 5
	}
	if m.Height != 0 {
		n += 5
	}
	if m.Diameter != 0 {
		n += 5
	}
	if m.Length != 0 {
		n += 5
	}
	return n
}

func (m *EndDeviceDefinition_Battery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Replaceable != nil {
		l = m.Replaceable.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *EndDeviceDefinition_OperatingConditions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Temperature != nil {
		l = m.Temperature.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.RelativeHumidity != nil {
		l = m.RelativeHumidity.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *EndDeviceDefinition_OperatingConditions_Limits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Min != nil {
		l = m.Min.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Max != nil {
		l = m.Max.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *EndDeviceDefinition_Photos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Main)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if len(m.Other) > 0 {
		for _, s := range m.Other {
			l = len(s)
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	return n
}

func (m *EndDeviceDefinition_Videos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Main)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if len(m.Other) > 0 {
		for _, s := range m.Other {
			l = len(s)
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	return n
}

func (m *EndDeviceDefinition_Compliances) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Safety) > 0 {
		for _, e := range m.Safety {
			l = e.Size()
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	if len(m.RadioEquipment) > 0 {
		for _, e := range m.RadioEquipment {
			l = e.Size()
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	return n
}

func (m *EndDeviceDefinition_Compliances_Compliance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Norm)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Standard)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *ListEndDeviceBrandsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BrandID)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Limit != nil {
		l = m.Limit.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Offset != nil {
		l = m.Offset.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.OrderBy)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *ListEndDeviceDefinitionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BrandID)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.ModelID)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Search)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.OrderBy)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Limit != nil {
		l = m.Limit.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Offset != nil {
		l = m.Offset.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.FieldMask != nil {
		l = m.FieldMask.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *ListEndDeviceBrandsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Brands) > 0 {
		for _, e := range m.Brands {
			l = e.Size()
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	return n
}

func (m *ListEndDeviceDefinitionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Definitions) > 0 {
		for _, e := range m.Definitions {
			l = e.Size()
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	return n
}

func sovDevicerepository(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDevicerepository(x uint64) (n int) {
	return sovDevicerepository((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *EndDeviceBrand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceBrand{`,
		`BrandID:` + fmt.Sprintf("%v", this.BrandID) + `,`,
		`BrandName:` + fmt.Sprintf("%v", this.BrandName) + `,`,
		`PrivateEnterpriseNumber:` + fmt.Sprintf("%v", this.PrivateEnterpriseNumber) + `,`,
		`OrganizationUniqueIdentifiers:` + fmt.Sprintf("%v", this.OrganizationUniqueIdentifiers) + `,`,
		`VendorId:` + fmt.Sprintf("%v", this.VendorId) + `,`,
		`Website:` + fmt.Sprintf("%v", this.Website) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Logo:` + fmt.Sprintf("%v", this.Logo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceDefinition) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHardwareVersions := "[]*EndDeviceDefinition_Version{"
	for _, f := range this.HardwareVersions {
		repeatedStringForHardwareVersions += strings.Replace(fmt.Sprintf("%v", f), "EndDeviceDefinition_Version", "EndDeviceDefinition_Version", 1) + ","
	}
	repeatedStringForHardwareVersions += "}"
	repeatedStringForFirmwareVersions := "[]*EndDeviceDefinition_FirmwareVersion{"
	for _, f := range this.FirmwareVersions {
		repeatedStringForFirmwareVersions += strings.Replace(fmt.Sprintf("%v", f), "EndDeviceDefinition_FirmwareVersion", "EndDeviceDefinition_FirmwareVersion", 1) + ","
	}
	repeatedStringForFirmwareVersions += "}"
	s := strings.Join([]string{`&EndDeviceDefinition{`,
		`ModelID:` + fmt.Sprintf("%v", this.ModelID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`HardwareVersions:` + repeatedStringForHardwareVersions + `,`,
		`FirmwareVersions:` + repeatedStringForFirmwareVersions + `,`,
		`Sensors:` + fmt.Sprintf("%v", this.Sensors) + `,`,
		`Dimensions:` + strings.Replace(fmt.Sprintf("%v", this.Dimensions), "EndDeviceDefinition_Dimensions", "EndDeviceDefinition_Dimensions", 1) + `,`,
		`Weight:` + fmt.Sprintf("%v", this.Weight) + `,`,
		`Battery:` + strings.Replace(fmt.Sprintf("%v", this.Battery), "EndDeviceDefinition_Battery", "EndDeviceDefinition_Battery", 1) + `,`,
		`OperatingConditions:` + strings.Replace(fmt.Sprintf("%v", this.OperatingConditions), "EndDeviceDefinition_OperatingConditions", "EndDeviceDefinition_OperatingConditions", 1) + `,`,
		`IPCode:` + fmt.Sprintf("%v", this.IPCode) + `,`,
		`KeyProvisioning:` + fmt.Sprintf("%v", this.KeyProvisioning) + `,`,
		`KeySecurity:` + fmt.Sprintf("%v", this.KeySecurity) + `,`,
		`Photos:` + strings.Replace(fmt.Sprintf("%v", this.Photos), "EndDeviceDefinition_Photos", "EndDeviceDefinition_Photos", 1) + `,`,
		`Videos:` + strings.Replace(fmt.Sprintf("%v", this.Videos), "EndDeviceDefinition_Videos", "EndDeviceDefinition_Videos", 1) + `,`,
		`ProductURL:` + fmt.Sprintf("%v", this.ProductURL) + `,`,
		`DatasheetURL:` + fmt.Sprintf("%v", this.DatasheetURL) + `,`,
		`Compliances:` + strings.Replace(fmt.Sprintf("%v", this.Compliances), "EndDeviceDefinition_Compliances", "EndDeviceDefinition_Compliances", 1) + `,`,
		`AdditionalRadios:` + fmt.Sprintf("%v", this.AdditionalRadios) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceDefinition_Version) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceDefinition_Version{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Numeric:` + fmt.Sprintf("%v", this.Numeric) + `,`,
		`PartNumber:` + fmt.Sprintf("%v", this.PartNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceDefinition_FirmwareVersion) String() string {
	if this == nil {
		return "nil"
	}
	keysForProfiles := make([]string, 0, len(this.Profiles))
	for k := range this.Profiles {
		keysForProfiles = append(keysForProfiles, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForProfiles)
	mapStringForProfiles := "map[string]*EndDeviceDefinition_FirmwareVersion_Profile{"
	for _, k := range keysForProfiles {
		mapStringForProfiles += fmt.Sprintf("%v: %v,", k, this.Profiles[k])
	}
	mapStringForProfiles += "}"
	s := strings.Join([]string{`&EndDeviceDefinition_FirmwareVersion{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Numeric:` + fmt.Sprintf("%v", this.Numeric) + `,`,
		`HardwareVersions:` + fmt.Sprintf("%v", this.HardwareVersions) + `,`,
		`Profiles:` + mapStringForProfiles + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceDefinition_FirmwareVersion_Profile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceDefinition_FirmwareVersion_Profile{`,
		`ProfileID:` + fmt.Sprintf("%v", this.ProfileID) + `,`,
		`LoRaWANCertified:` + fmt.Sprintf("%v", this.LoRaWANCertified) + `,`,
		`CodecID:` + fmt.Sprintf("%v", this.CodecID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceDefinition_Dimensions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceDefinition_Dimensions{`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`Diameter:` + fmt.Sprintf("%v", this.Diameter) + `,`,
		`Length:` + fmt.Sprintf("%v", this.Length) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceDefinition_Battery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceDefinition_Battery{`,
		`Replaceable:` + strings.Replace(fmt.Sprintf("%v", this.Replaceable), "BoolValue", "types.BoolValue", 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceDefinition_OperatingConditions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceDefinition_OperatingConditions{`,
		`Temperature:` + strings.Replace(fmt.Sprintf("%v", this.Temperature), "EndDeviceDefinition_OperatingConditions_Limits", "EndDeviceDefinition_OperatingConditions_Limits", 1) + `,`,
		`RelativeHumidity:` + strings.Replace(fmt.Sprintf("%v", this.RelativeHumidity), "EndDeviceDefinition_OperatingConditions_Limits", "EndDeviceDefinition_OperatingConditions_Limits", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceDefinition_OperatingConditions_Limits) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceDefinition_OperatingConditions_Limits{`,
		`Min:` + strings.Replace(fmt.Sprintf("%v", this.Min), "FloatValue", "types.FloatValue", 1) + `,`,
		`Max:` + strings.Replace(fmt.Sprintf("%v", this.Max), "FloatValue", "types.FloatValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceDefinition_Photos) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceDefinition_Photos{`,
		`Main:` + fmt.Sprintf("%v", this.Main) + `,`,
		`Other:` + fmt.Sprintf("%v", this.Other) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceDefinition_Videos) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceDefinition_Videos{`,
		`Main:` + fmt.Sprintf("%v", this.Main) + `,`,
		`Other:` + fmt.Sprintf("%v", this.Other) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceDefinition_Compliances) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSafety := "[]*EndDeviceDefinition_Compliances_Compliance{"
	for _, f := range this.Safety {
		repeatedStringForSafety += strings.Replace(fmt.Sprintf("%v", f), "EndDeviceDefinition_Compliances_Compliance", "EndDeviceDefinition_Compliances_Compliance", 1) + ","
	}
	repeatedStringForSafety += "}"
	repeatedStringForRadioEquipment := "[]*EndDeviceDefinition_Compliances_Compliance{"
	for _, f := range this.RadioEquipment {
		repeatedStringForRadioEquipment += strings.Replace(fmt.Sprintf("%v", f), "EndDeviceDefinition_Compliances_Compliance", "EndDeviceDefinition_Compliances_Compliance", 1) + ","
	}
	repeatedStringForRadioEquipment += "}"
	s := strings.Join([]string{`&EndDeviceDefinition_Compliances{`,
		`Safety:` + repeatedStringForSafety + `,`,
		`RadioEquipment:` + repeatedStringForRadioEquipment + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceDefinition_Compliances_Compliance) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceDefinition_Compliances_Compliance{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`Norm:` + fmt.Sprintf("%v", this.Norm) + `,`,
		`Standard:` + fmt.Sprintf("%v", this.Standard) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListEndDeviceBrandsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListEndDeviceBrandsRequest{`,
		`BrandID:` + fmt.Sprintf("%v", this.BrandID) + `,`,
		`Limit:` + strings.Replace(fmt.Sprintf("%v", this.Limit), "UInt32Value", "types.UInt32Value", 1) + `,`,
		`Offset:` + strings.Replace(fmt.Sprintf("%v", this.Offset), "UInt32Value", "types.UInt32Value", 1) + `,`,
		`OrderBy:` + fmt.Sprintf("%v", this.OrderBy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListEndDeviceDefinitionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListEndDeviceDefinitionsRequest{`,
		`BrandID:` + fmt.Sprintf("%v", this.BrandID) + `,`,
		`ModelID:` + fmt.Sprintf("%v", this.ModelID) + `,`,
		`Search:` + fmt.Sprintf("%v", this.Search) + `,`,
		`OrderBy:` + fmt.Sprintf("%v", this.OrderBy) + `,`,
		`Limit:` + strings.Replace(fmt.Sprintf("%v", this.Limit), "UInt32Value", "types.UInt32Value", 1) + `,`,
		`Offset:` + strings.Replace(fmt.Sprintf("%v", this.Offset), "UInt32Value", "types.UInt32Value", 1) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListEndDeviceBrandsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBrands := "[]*EndDeviceBrand{"
	for _, f := range this.Brands {
		repeatedStringForBrands += strings.Replace(f.String(), "EndDeviceBrand", "EndDeviceBrand", 1) + ","
	}
	repeatedStringForBrands += "}"
	s := strings.Join([]string{`&ListEndDeviceBrandsResponse{`,
		`Brands:` + repeatedStringForBrands + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListEndDeviceDefinitionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDefinitions := "[]*EndDeviceDefinition{"
	for _, f := range this.Definitions {
		repeatedStringForDefinitions += strings.Replace(f.String(), "EndDeviceDefinition", "EndDeviceDefinition", 1) + ","
	}
	repeatedStringForDefinitions += "}"
	s := strings.Join([]string{`&ListEndDeviceDefinitionsResponse{`,
		`Definitions:` + repeatedStringForDefinitions + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDevicerepository(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EndDeviceBrand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDeviceBrand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDeviceBrand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateEnterpriseNumber", wireType)
			}
			m.PrivateEnterpriseNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivateEnterpriseNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationUniqueIdentifiers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationUniqueIdentifiers = append(m.OrganizationUniqueIdentifiers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorId", wireType)
			}
			m.VendorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VendorId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceDefinition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDeviceDefinition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDeviceDefinition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareVersions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardwareVersions = append(m.HardwareVersions, &EndDeviceDefinition_Version{})
			if err := m.HardwareVersions[len(m.HardwareVersions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirmwareVersions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirmwareVersions = append(m.FirmwareVersions, &EndDeviceDefinition_FirmwareVersion{})
			if err := m.FirmwareVersions[len(m.FirmwareVersions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sensors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sensors = append(m.Sensors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dimensions == nil {
				m.Dimensions = &EndDeviceDefinition_Dimensions{}
			}
			if err := m.Dimensions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.Weight = float32(math.Float32frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Battery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Battery == nil {
				m.Battery = &EndDeviceDefinition_Battery{}
			}
			if err := m.Battery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperatingConditions == nil {
				m.OperatingConditions = &EndDeviceDefinition_OperatingConditions{}
			}
			if err := m.OperatingConditions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyProvisioning", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyProvisioning = append(m.KeyProvisioning, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySecurity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeySecurity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Photos == nil {
				m.Photos = &EndDeviceDefinition_Photos{}
			}
			if err := m.Photos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Videos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Videos == nil {
				m.Videos = &EndDeviceDefinition_Videos{}
			}
			if err := m.Videos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasheetURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasheetURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compliances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Compliances == nil {
				m.Compliances = &EndDeviceDefinition_Compliances{}
			}
			if err := m.Compliances.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalRadios", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalRadios = append(m.AdditionalRadios, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceDefinition_Version) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numeric", wireType)
			}
			m.Numeric = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Numeric |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceDefinition_FirmwareVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirmwareVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirmwareVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numeric", wireType)
			}
			m.Numeric = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Numeric |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareVersions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardwareVersions = append(m.HardwareVersions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profiles == nil {
				m.Profiles = make(map[string]*EndDeviceDefinition_FirmwareVersion_Profile)
			}
			var mapkey string
			var mapvalue *EndDeviceDefinition_FirmwareVersion_Profile
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDevicerepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDevicerepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDevicerepository
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDevicerepository
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDevicerepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDevicerepository
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDevicerepository
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &EndDeviceDefinition_FirmwareVersion_Profile{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDevicerepository(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthDevicerepository
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Profiles[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceDefinition_FirmwareVersion_Profile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Profile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Profile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoRaWANCertified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LoRaWANCertified = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodecID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodecID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceDefinition_Dimensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dimensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dimensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.Width = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.Height = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diameter", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.Diameter = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:])
			iNdEx += 4
			m.Length = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceDefinition_Battery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Battery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Battery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replaceable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replaceable == nil {
				m.Replaceable = &types.BoolValue{}
			}
			if err := m.Replaceable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceDefinition_OperatingConditions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatingConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatingConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temperature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Temperature == nil {
				m.Temperature = &EndDeviceDefinition_OperatingConditions_Limits{}
			}
			if err := m.Temperature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelativeHumidity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelativeHumidity == nil {
				m.RelativeHumidity = &EndDeviceDefinition_OperatingConditions_Limits{}
			}
			if err := m.RelativeHumidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceDefinition_OperatingConditions_Limits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Limits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Limits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Min == nil {
				m.Min = &types.FloatValue{}
			}
			if err := m.Min.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Max == nil {
				m.Max = &types.FloatValue{}
			}
			if err := m.Max.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceDefinition_Photos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Photos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Photos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Main", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Main = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Other", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Other = append(m.Other, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceDefinition_Videos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Videos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Videos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Main", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Main = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Other", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Other = append(m.Other, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceDefinition_Compliances) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Compliances: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Compliances: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Safety", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Safety = append(m.Safety, &EndDeviceDefinition_Compliances_Compliance{})
			if err := m.Safety[len(m.Safety)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RadioEquipment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RadioEquipment = append(m.RadioEquipment, &EndDeviceDefinition_Compliances_Compliance{})
			if err := m.RadioEquipment[len(m.RadioEquipment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceDefinition_Compliances_Compliance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Compliance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Compliance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Norm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Norm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Standard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Standard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEndDeviceBrandsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEndDeviceBrandsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEndDeviceBrandsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limit == nil {
				m.Limit = &types.UInt32Value{}
			}
			if err := m.Limit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Offset == nil {
				m.Offset = &types.UInt32Value{}
			}
			if err := m.Offset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEndDeviceDefinitionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEndDeviceDefinitionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEndDeviceDefinitionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Search = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limit == nil {
				m.Limit = &types.UInt32Value{}
			}
			if err := m.Limit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Offset == nil {
				m.Offset = &types.UInt32Value{}
			}
			if err := m.Offset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldMask == nil {
				m.FieldMask = &types.FieldMask{}
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEndDeviceBrandsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEndDeviceBrandsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEndDeviceBrandsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brands = append(m.Brands, &EndDeviceBrand{})
			if err := m.Brands[len(m.Brands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEndDeviceDefinitionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEndDeviceDefinitionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEndDeviceDefinitionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Definitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Definitions = append(m.Definitions, &EndDeviceDefinition{})
			if err := m.Definitions[len(m.Definitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDevicerepository(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDevicerepository
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDevicerepository
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDevicerepository
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDevicerepository        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDevicerepository          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDevicerepository = fmt.Errorf("proto: unexpected end of group")
)
